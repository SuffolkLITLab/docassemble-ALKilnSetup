---
comment: |
  Templates use Mako to fill in the needed custom details.
  Templates are used as strings with PyGithub.
---
template: installer.env_example
content: |
  # Username and password to log in to a docassemble playground to run tests
  PLAYGROUND_EMAIL=example@example.com
  PLAYGROUND_PASSWORD=12345
  
  # Your PLAYGROUND_ID can be found in the url of an interview launched from that playground.
  # It should look something like this:
  # https://www.docassemble-server-url.com/interview?i=docassemble.playground[PLAYGROUND_ID]%3Ainterview.yml#page1
  # Example: https://www.docassemble-server-url.com/interview?i=docassemble.playground34%3Ainterview.yml#page1. 34 is the id.
  PLAYGROUND_ID=11111

  BASE_URL=https://www.docassemble-server-url.com
  REPO_URL=https://github.com/owner_name/repo_name

  # Name of the branch on the Github repo to be tested.
  BRANCH_PATH=main

  # Tests will be generated for the buttons with the text
  # below (intended for testing different language translations)
  # Examples: Español, Tiếng Việt, Português, 中文, Kreyòl
  EXTRA_LANGUAGES=

  # Change this to DEBUG=1 to run tests in a visible browser
  DEBUG=
---
template: installer.example_test
content: |
  @example_feature_tag
  Feature: An example test

  What specific behavior this file should test
  [x] Make sure the Project runs on the server
  [ ] Make sure the interview itself starts
  [ ] Find the ultimate question to life, the universe, and everything.

  @example_scenario_tag
  Scenario: Server finishes reloading
    Given I start the interview at "test"
---
template: installer.gitignore
content: |
  tests/chromedriver
  *DS_Store*
  node_modules*
  .env
  npm-debug.log
  error*.jpg
  screenshot_*.jpg
  downloads_*
  *_lang_*.feature
  *_report_*
  _al_test_project_name*
---
template: installer.package_json
content: |
  {
    "name": "${ installer.repo_name }",
    "version": "0.1.0",
    "description": "",
    "main": "",
    "directories": {
      "test": "tests"
    },
    "scripts": {
      "test": "npm run langs_setup && npm run cucumber -- $@",
      "cucumber_base": "./node_modules/.bin/cucumber-js --require ./node_modules/docassemble-cucumber/lib/index.js",
      "cucumber": "run_cucumber(){ npm run cucumber_base -- \"$@\" docassemble/*/data/sources/*.feature; }; run_cucumber",
      "langs": "npm run langs_setup && ./node_modules/.bin/cucumber-js --require ./node_modules/docassemble-cucumber/lib/index.js docassemble/*/data/sources/*_lang*.feature",
      "langs_setup": "node_modules/.bin/da-langs 'docassemble/*/data/sources/*.feature'",
      "langs_local": "npm run langs_setup && npm run local",
      "local": "npm run setup && npm run cucumber; npm run takedown",
      "setup": "node_modules/.bin/da-setup",
      "takedown": "node_modules/.bin/da-takedown"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/${ installer.owner_name }/${ installer.repo_name }.git"
    },
    "author": "",
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/${ installer.owner_name }/${ installer.repo_name }/issues"
    },
    "homepage": "https://github.com/${ installer.owner_name }/${ installer.repo_name }#readme",
    "dependencies": {
      "bufferutil": "^4.0.1",
      "chai": "^4.2.0",
      "cucumber": "^6.0.5",
      "docassemble-cucumber": "^2.0.0",
      "dotenv": "^8.2.0",
      "mocha": "^7.2.0",
      "puppeteer": "^3.1.0",
      "utf-8-validate": "^5.0.2"
    }
  }
---
# The closing '}}' doesn't really need to be contained.
# It just seemed more consistent
template: installer.run_form_tests
content: |
  name: Test the interview

  on:
    push:
    workflow_dispatch:
      inputs:
        extra_languages:
          description: 'Optional. A list of comma separated language names visible on buttons or links that change the language of the interview. Overrides the EXTRA_LANGUAGES repo secret.'
          default: ''
        tags:
          description: 'Optional. Use a "tag expression" specify which tagged tests to run (https://cucumber.io/docs/cucumber/api/#tag-expressions)'
          default: ''

  jobs:

    puppeteer-tests:
      runs-on: ubuntu-latest

      strategy:
        matrix:
          node-version: [12.x]

      env:
        BASE_URL: ${ '${{' } secrets.SERVER_URL ${ '}}' }
        PLAYGROUND_EMAIL: ${ '${{' } secrets.PLAYGROUND_EMAIL ${ '}}' }
        PLAYGROUND_PASSWORD: ${ '${{' } secrets.PLAYGROUND_PASSWORD ${ '}}' }
        PLAYGROUND_ID: ${ '${{' } secrets.PLAYGROUND_ID ${ '}}' }
        BRANCH_PATH: ${ '${{' } github.ref ${ '}}' }
        EXTRA_LANGUAGES: ${ '${{' } secrets.EXTRA_LANGUAGES ${ '}}' }

      name: Run Puppeteer tests
      steps:
        - name: Set languages
          run: echo "EXTRA_LANGUAGES=${ '${{' } github.event.inputs.extra_languages ${ '}}' }" >> $GITHUB_ENV
          if: ${ '${{' } github.event.inputs.extra_languages != '' ${ '}}' }
        - run: echo "REPO_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" >> $GITHUB_ENV
        - run: echo "Repo address is $REPO_URL"
        - name: Checkout
          uses: actions/checkout@v2
        - name: Setup environment
          uses: actions/setup-node@v1
          with:
            node-version: ${ '${{' } matrix.node-version ${ '}}' }
        - run: npm install
        - run: npm run setup
        - run: npm run test -- ${ '${{' } github.event.inputs.tags && format('"--tags" "{0}"', github.event.inputs.tags) ${ '}}' }
        - name: upload error artifacts
          uses: actions/upload-artifact@v2
          if: ${ '${{' } failure() ${ '}}' }
          with:
            name: errors
            path: ./**/error*.jpg
        - name: upload screenshot steps
          uses: actions/upload-artifact@v2
          # They will upload even if a previosu step has failed
          if: ${ '${{' } always() ${ '}}' }
          with:
            name: screenshots
            path: ./**/screenshot*.jpg
        - name: upload downloads
          uses: actions/upload-artifact@v2
          # They will upload even if a previous step has failed
          if: ${ '${{' } always() ${ '}}' }
          with:
            name: downloads
            path: ./**/downloads_*
        - name: upload report
          uses: actions/upload-artifact@v2
          # They will upload even if a previous step has failed
          if: ${ '${{' } always() ${ '}}' }
          with:
            name: report
            path: ./**/*_report_*
        - name: Cleanup
          if: ${ '${{' } always() ${ '}}' }
          run: npm run takedown
---
