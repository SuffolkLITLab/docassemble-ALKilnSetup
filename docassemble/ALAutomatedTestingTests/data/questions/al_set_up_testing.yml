metadata:
  title: Set up AL automated testing
  short title: Set up AL testing
  description: Set up AssemblyLine automated testing for your docassemble package
  comment: Test the automated integrated testing library for AssemblyLine
---
features:
  question back button: True
  css:
    - styles.css
---
modules:
  - .al_set_up_testing
---
objects:
  - installer: TestInstaller
---
include:
  - al_testing_files_to_push.yml
---
comment: |
  want to set org secrets
    must be an org admin
  want to set up tests for one package
    have secrets
      set up url
    don't have secrets
      need to be an admin and set up repo secrets
---
mandatory: True
code: |
  ## for dev
  #installer.repo_url = 'https://github.com/plocket/install'
  #installer.playground_url = 'https://apps-dev.suffolklitlab.org/interview?i=docassemble.playground12ALTestingGHSendFiles%3Aal_set_up_testing.yml#page4'
  
  # show errors first thing on each loop
  if len( installer.errors ) > 0:
    show_errors
  
  # Secrets
  if is_org_admin or is_repo_admin:
    wants_to_set_up_tests
    if not defined('has_secrets'):
      has_secrets = False
  else:
    wants_to_set_org_secrets = False
    wants_to_set_repo_secrets = False
    wants_to_set_up_tests = True
    # DO NOT define has_secrets
  
  if not has_secrets:
    # Get secrets, org or repo
    pass
  
  # Get file pushing permission. may need to set up token
  # If setting up files, get repo address
  
  #if wants_to_set_up_tests and not wants_to_set_org_secrets and not wants_to_set_repo_secrets:
  #
  #
  #if wants_to_set_up_tests:
  #  # do secrets exist already?
  #  # admins will have been asked this already
  #  has_secrets
  #
  #if wants_to_set_up_tests:
  #  if not has_secrets:
  #    #must have secrets to set up tests kickout
  #    pass
  #
  #if wants_to_set_org_secrets:
  #  #set_org_secrets
  #  
  #
  #  if not wants_to_set_org_secrets and not wants_to_set_repo_secrets:
  #    if not existing_secrets['org'] and not existing_secrets['repo']:
  #    if is_org_admin:
  #      #set_org_secrets
  #      pass
  #    
  #    elif is_repo_admin:
  #      #set_repo_secrets
  #      pass
  #      
  #    else:
  #      pass
  #      
  #
  #
  #if is_org_admin:
  #  if wants_to_set_org_secrets:
  #    #set_org_secrets
  #    pass
  #  elif wants_to_set_repo_secrets:
  #    #set_repo_secrets
  #    pass
  #elif is_repo_admin:
  #  if wants_to_set_repo_secrets:
  #    #set_repo_secrets
  #    pass
  #elif is_org_contributor or is_repo_contributor:
  #  if not existing_secrets['org'] and not existing_secrets['repo']:
  #    #no_secrets_kickout
  #    pass
  #
  #
  #if  not has_set_secrets && wants_to_set_up_tests:
  #  pass
  #
  ## The tricky one is the admin who wants to set up tests, but not secrets
  ## If admin and want to set up tests, but not want to set up secrets, ask if already has secrets (existing_secrets)
  ## if not, set secrets
  #
  ##permissions_status
  ##'contributor'
  ##'admin'
  ##if installer.goal == 'org_secrets':
  ##  if permissions_status == 'admin':
  ##    get_org_secrets_info
  ##    set_org_secrets
  ##  if permissions_status == 'contributor':
  ##    need_to_be_an_org_admin
  ##if installer.goal == 'one_package':
  ##  if permissions_status == 'contributor':
  ##    if part_of_an_org and (org_has_secrets_already or wants_only_repo_secrets):
  ##      pass
  ##    else:
  ##      need_to_be_a_repo_admin
  ##  # Not kicked out so far
  ##  repo_intro
  #
  #if will_test_on_this_server:
  #  if not logged_into_test_account_on_interview_server:
  #    log_into_test_account
  ##
  ### da stuff
  ##installer.password
  ##set_da_info
  ##
  ### github stuff
  ##installer.token
  ##set_github_auth
  ##
  ### confirm
  ##is_ready
  ##
  ### update github
  ##update_github
  ##
  ###instructions
  ##force_ask( 'next_steps' )
  
  force_ask( 'next_steps_org' )
---
code: |
  
  if will_test_on_this_server:
    if not logged_into_test_account_on_interview_server:
      log_into_test_account
      
  installer.password
  set_da_info
      
  handle_set_secrets = True
---
code: |
  if wants_to_set_repo_secrets:
    #set_repo_secrets
    pass
  handle_repo_secrets = True
---
code: |
  handle_has_secrets = True
---
code: |
  installer.set_org_secrets()
  set_org_secrets = True
---
code: |
  installer.set_da_info()
  set_da_info = True
---
code: |
  installer.set_github_auth()
  set_github_auth = True
---
code: |
  # These vars need to be defined before creating a branch.
  # Otherwise, because of da execution behavior, they cause
  # loops that end up creating 5 branches. It seemed to make
  # sense to put them in here.
  installer.env_example_str = installer.env_example.content
  installer.example_test_str = installer.example_test.content
  installer.gitignore_str = installer.gitignore.content
  installer.package_json_str = installer.package_json.content
  installer.run_form_tests_str = installer.run_form_tests.content
  installer.update_github()
  update_github = True
---
auto terms:
  - the docassemble account where the tests will run: Remember that **you can use your own account** and you can always change this later.
---
comment: |
  https://flowchart.fun/c#H4hQBsEME8HsFcAuAuUACNA7SBbApsmgCaQDmATnumuZJgNYAiAluYQDIBKoIwooAegBUAFQAWzAM5pIAB1loA7rHL1pAI2hpE0Wc0ylqASUxE8mRPtJoAxpUiI80yGnD7622NrF5b8cpQWrvpUGHRajgAeKGjqeABmKr4uNrDgsJi29o7OrpBx4NQYsIg+bGgAFDbwkoiwOGhGjACU1ADC2cnBDMSseDaI4Fo1Vt6+eJGQA3kF2hOIRcH0vqVShBXiUjLySipqsRG6Vq0YGADa1bX1jYwAumgqixiaMkREo3RoZ033dEQ0CTwgRso1KDiepzcy28a0qlzqDSazTQAgEaAAmghbJ9IOBJF4ar5JFZwHgALRuTC+VI4fAWSSgIQCQRCUCPHDwcCWSlUGl0xAM0AACUgADdfPF4JgAIRoQA8G4BI-cZzLZ5GskCIOH01BsdEIkjwiAearQBrshoZ50osi8knuusw+sNAJtpv6lAF1DOOQF9r1bqN8AUPrQ8WYpIZ1q8Gq1mB1-oqUdNJ2xjsqPskrRU1lSFnIzHUSEeGCqGUQ+fUrSTufLBaL5GopbzBdaFzLFfusJrFfr1GzaDEkGkZo9ltOFQzKaTg+H7otiwnTgFKcwtrnntOWC8GdAQA
---
id: repo role
question: |
  Document Assembly Line automated integrated testing
subquestion: |
  This tool helps developers or organizations set up automated integrated testing for docassemble packages that have a GitHub repository.
  
  What you can do depends on your situation and what kind of GitHub permissions you have.
  
  Which descriptions fit you? Pick at least one.
fields:
  - I am an admin of the GitHub organization with access to security settings: is_org_admin
    datatype: yesnowide
    default: false
  - I am a contributor of the GitHub organization WITHOUT access to security settings: is_org_contributor
    datatype: yesnowide
  - I am an admin of the package's GitHub repository with access to security settings: is_repo_admin
    datatype: yesnowide
  - I am a contributor to the package's GitHub repository WITHOUT access to security settings: is_repo_contributor
    datatype: yesnowide
validation code: |
  if (not is_org_admin
      and not is_org_contributor
      and not is_repo_admin
      and not is_repo_contributor):
    validation_error("You cannot set up tests if you don't have at least one of these roles.")
---
id: admin goal
question: |
  What do you want to do?
subquestion: |
  These tests need to make a Project on your docassemble server and then run an interview from that Project. [GitHub secrets](https://docs.github.com/en/actions/reference/encrypted-secrets) store and encrypt the information the tests need in order to do that. The tests need these secrets:
  
  ${ secrets_list }
  
  If an admin sets up organization secrets they are availalble for all organization repositories and you don't need repository secrets.
  
  ${ how_to_see_repo_secrets }
  
  What do you want to do?
fields:
  - I want to set or update the organization's secrets: wants_to_set_org_secrets
    datatype: yesnowide
    js enable if: |
      !val('wants_to_set_repo_secrets')
    show if:
      code: |
        is_org_admin
  - I want to set or update the repository's secrets: wants_to_set_repo_secrets
    datatype: yesnowide
    show if:
      code: |
        is_org_admin
    js enable if: |
      !val('wants_to_set_org_secrets')
  - I want to set or update the repository's secrets: wants_to_set_repo_secrets
    datatype: yesnowide
    show if:
      code: |
        not is_org_admin
  - I want to set up testing for a package: wants_to_set_up_tests
    datatype: yesnowide
  - note: A package must have access to GitHub secrets in order to run tests.
    js show if: |
      val('wants_to_set_up_tests') && !val('wants_to_set_repo_secrets') && !val('wants_to_set_org_secrets')
  - The package already has access to organization or repository secrets: has_secrets
    datatype: yesnowide
    help: |
      ${ how_to_see_repo_secrets } (see above for link)
    js show if: |
      val('wants_to_set_up_tests') && !val('wants_to_set_repo_secrets') && !val('wants_to_set_org_secrets')
validation code: |
  if (wants_to_set_up_tests
      and not wants_to_set_repo_secrets
      and not wants_to_set_org_secrets
      and not has_secrets):
    validation_error("If you want to set up tests and the package does not have access to secrets, you must choose a way to set secrets.")
  if (not wants_to_set_up_tests
      and not wants_to_set_org_secrets
      and not wants_to_set_repo_secrets):
    validation_error("You must mark at least one choice.")
  # Make sure has_secrets is defined with this validation code?
---
# If non-admin and want to set up testing
id: which secrets exist non-admin
question: |
  GitHub secrets
subquestion: |
  For tests to work, a repository needs [GitHub secrets](https://docs.github.com/en/actions/reference/encrypted-secrets) set by the organization or repo admin. What is the status of the secrets now? If you don't know, ask the admin of the organization or repository if these secrets are set:

  ${ secrets_list }
  
  ${ how_to_see_repo_secrets }
fields:
  - Does the package have access to those secrets?: has_secrets
    datatype: radio
    choices:
      - The package has access to those secrets: True
      - The repository has those secrets: repo
---
template: how_to_see_repo_secrets
content: |
  To see a repository's secrets, an admin can go to the same place as where they [set the repository's secrets](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository).
---
  #- What are you setting up this time?: installer.goal
  #  datatype: radio
  #  choices:
  #    - I'm setting up organization [GitHub secrets](https://docs.github.com/en/actions/reference/encrypted-secrets): org_secrets
  #    - I'm setting up testing for one package: one_package
  #    #- I'm setting up testing for multiple packages: multiple_packages
  #- What kind of GitHub permissions do you have for this?: permissions_status
  #  datatype: radio
  #  choices:
  #    - I am a contributor, but I do not have access to security settings: contributor
  #    - I am an admin and have access to security settings: admin
---
#if: installer.goal == 'one_package' and
event: nothing
question: |
  thing
subquestion: |
  
  - How do you want to set up testing?: repo_scope
    datatype: radio
    enabled if:
      variable: installer.goal
      is: one_package
    choices:
      - As part of an organization: org
      - Independent of an organization: independent
  - 
    datatype: yesno
  
    datatype: yesno
    disable if:
      variable: installer.goal
      is: one_package
  - note: |
      Ask an admin in the GitHub organization if the organization already has these secrets:
      
      ${ secrets_list }
      
    show if: part_of_an_org
  - This organization already has the necessary secrets: org_has_secrets_already
    datatype: yesno
    show if: org_package
  #- Does the docassemble package or packages belong to an organization?: is_org_package
  #  datatype: yesnomayberadio
  #- Which of these best describes you?: type_of_org_user
  #  show if:
  #    variable: is_org_package
  #    is: True
  #  datatype: radio
  #  choices:
  #    - I am a GitHub contributor, but I have no access to security settings
  #    - I am a GitHub contributor for a GitHub organization's packages, but I have no access to security settings for this package's repository: org_dev
  #    - I am a GitHub contributor for one package's repository, but I have no access to security settings: repo_dev
  #    - I am an admin for this package's repository and can access security settings: repo_admin
  #    - I am an admin of this package's organization: org_admin
---
id: org secrets
#if: installer.goal == 'org_secrets' and permissions_status == 'admin'
continue button field: get_org_secrets_info
question: |
  Setting up GitHub secrets for your organization
subquestion: |
  [Organization-wide secrets](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-an-organization) will allow any of your contributors to very easily add automated testing to any of your organization's packages. If they can push to the repository, they can set up testing for it.

  :clock: This could take about 10 minutes
  
  ---
  
  You will set these secrets:
  
  ${ secrets_list }
  
  ---
  
  You must be an admin on the GitHub organization so you can temporarily give this tool permission to create secrets. Once you are logged into GitHub as an admin:
  
  1. Start making a [personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) for your GitHub account. You will be able to delete it after you are finished here.
  1. Tap the checkbox for "admin:org" permissions.
  1. Finish creating the token.
  1. Copy the token and paste it below.
fields:
  - Personal access token: installer.token
    datatype: password
    help: |
      The token must have "admin:org" permissions.
  - note: |
      We also need the GitHub organizatoin name with correct capitalization. Example:[BR]
      `SuffolkLITLab`
  - Organization: installer.owner_name
---
id: not org admin kickout
event: need_to_be_an_org_admin
question: |
  You need to be an admin
subquestion: |
  You need to be an organization admin to set up organization secrets. Contact your admin and give them a link to this interview so they can set up the organization secrets.
---
id: non admin repo questions
question: |
  Where will your secrets be?
  part_of_an_org and (org_has_secrets_already or wants_only_repo_secrets)
---
id: non admin repo kickout
event: need_to_be_a_repo_admin
question: |
  You need to be an admin
subquestion: |
  You need to be an admin on a repository to set up automated tests. Contact your admin and give them a link to this interview so they can set up automated testing for this package.
---
# TODO: Add link to docs where we explain how the library makes a project, etc.
# TODO: Add links to the actual github repo and files and folders
# TODO: only show 'other than you' if the person is logged in
id: intro personal repo
question: |
  Set up Document Assembly Line automated integrated testing
subquestion: |
  This interview will help you set up automated integrated GitHub testing for a docassemble package.

  :clock: This could take about 40 minutes
  
  ---
  
  **Make sure:**
  
  * The package is in a GitHub repository.
  * You have admin permissions on the package's GitHub repository.
  * You are logged into the docassemble account where the tests will run.
  
  ---

  **Sneak Peak**

  This tool will add folders and files to the project:

  ${ files_list }
  
  It will add 3 [GitHub "SECRETS"](https://docs.github.com/en/actions/reference/encrypted-secrets) to the repository to store encrypted information safely:
  
  ${ secrets_list }
  
  ---
  
  Your answers will be encrypted end-to-end and on the server. No one other than you will have access to them.
  
continue button field: repo_intro
---
template: files_list
content: |
  * `tests/features/example_test.feature` is a very simple example of a test.
  * `.github/workflows/run_interview_tests.yml` tells GitHub when and how to run the tests.
  * `package.json` lets GitHub load other packages it needs to run the tests.
  * `.gitignore` is for developers who want to work in their local environment.
  * `.env-example` can help guide developers who want to work in their local environment to set up the environment variables.
---
template: secrets_list
content: |
  * SERVER_URL
  * PLAYGROUND_EMAIL
  * PLAYGROUND_PASSWORD
  * PLAYGROUND_ID
---
id: on testing server
question: |
  Before we start
subquestion: |
  Look at the url of this page. Is this the server where the tests will run?
yesno: will_test_on_this_server
---
id: logged_into_test_account_on_interview_server
question: |
  What account are you logged in on?
subquestion: |
  Are you logged into the docassemble account where the tests will run?
yesno: logged_into_test_account_on_interview_server
---
id: log_into_test_account
question: |
  Before you continue
subquestion: |
  You will probably need to log into the account where the tests will run. Since this form is on the same server and you are not logged into that account, you can do one of 3 things:
  
  * Open an incognito window and log into that account there.
  * Go to a different browser to log into that account.
  * Leave this interview, log into the account, and start this interview again.

  Tap to continue when you have done one of those.

continue button field: log_into_test_account
---
id: org secrets info
question: |
  Docassemble
subquestion: |
  Tests will create Projects in an account on your docassemble server, pull in the GitHub code, and run the interviews.
  
  Decide on the docassemble account where the tests will run. Answer the questions below for the account. If you want to use your own account, put your own docassemble email and password below.
fields:
  - Account email: installer.email
    datatype: email
  - Account password: installer.password
    datatype: password
  - note: |
      What is the address of your docassemble server? Example:[BR]
      `https://dev.legal-help.org`
  - no label: installer.server_url
auto terms:
  - the URL in the address bar: |
      The interview URL will give us the account's Playground ID and the address of the server that the account is on.
---
id: server info
question: |
  Docassemble
subquestion: |
  These tests will create Projects in an account on your docassemble server, pull in the GitHub code, and run the interviews. To do that, they need docassemble login information. This is what will be in the encrypted GitHub secrets.
  
  1. Decide on the docassemble account where the tests will run
  1. Make sure you are logged into that account.
  1. Answer the questions below for the docassemble account that will run tests. If you want to use your own account, put your own docassemble email and password below.
  
fields:
  - Email: installer.email
    datatype: email
  - Password: installer.password
    datatype: password
  - note: |
      Go to the Playground of the account and run any working YAML file. For example, test.yml. What is the URL in the address bar? Example:[BR]
      `https://dev.legal.org/interview?i=docassemble.playground22%3Atest.yml`
  - URL: installer.playground_url
auto terms:
  - the URL in the address bar: |
      The interview URL will give us the account's Playground ID and the address of the server that the account is on.    
---
# TODO: Add instructions on how to find the GitHub repo url on Packages page (maybe point to docs)
id: github auth
question: |
  GitHub authorization
subquestion: |
  You must be an admin on the GitHub repository so you can temporarily give this form permission to add files and set "SECRETS". Once you are logged in as an admin:
  
  1. Start making a [personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) for your GitHub account.
  1. Tap the checkbox for 'workflow' permissions. That should also trigger 'repo' permissions. This form needs both.
  1. Finish creating the token.
  1. Copy the token and paste it below.
fields:
  - Personal access token: installer.token
    datatype: password
    help: |
      The token must have 'repo' and 'workflow' permissions.
  - note: |
      We also need the GitHub repository URL of the package. Example:[BR]
      `https://github.com/LawMagic/docassemble-GreatForm`
  - GitHub URL: installer.repo_url
    help: |
      The repository's URL will give us the name of the repo and its owner.
---
id: confirm info
question: |
  Is all this information correct?
subquestion: |
  You will not be able to come back here after continuing.
review:
  - Edit: installer.playground_url
    button: |
      #####Docassemble account and server:
      
      * **Account email**:[BR]
      ${ installer.email }
      
      * **Account password**: Not shown
      
      * **URL for running testable interview**:[BR]
      [${ installer.playground_url }](${ installer.playground_url })
      
      ######**Your answers also gave us this information:**
      
      * **Account Playground ID**: ${ installer.playground_id }
      
      * **Server to test on**:[BR]
      ${ installer.server_url }
      
      ---
  - Edit: installer.repo_url
    button: |
      #####GitHub repo and permission
      
      * **Repository URL**:[BR]
      [https://github.com/${ installer.owner_name }/${ installer.repo_name }](https://github.com/${ installer.owner_name }/${ installer.repo_name })
      
      * **Admin personal token**: Not shown
      
      ######**Your answers also gave us this information:**
      
      * **Your username**:[BR]
      ${ installer.user_name }
      
      * **Owner of the repository**:[BR]
      ${ installer.owner_name }
      
      * **Package name**:[BR]
      ${ installer.package_name }
  - note: Continue when you are ready. You will not be able to come back to this page.
continue button field: is_ready
continue button label: Finish
---
event: next_steps
prevent going back: True
question: |
  Next steps
subquestion: |
  This should have created a [Pull Request in the package's GitHub repository](${ installer.pull_url }). New folders and files should have been added to the package:
  
  ${ files_list }
  
  Also, 3 [GitHub "SECRETS"](https://docs.github.com/en/actions/reference/encrypted-secrets) were set to store encrypted docassemble login information safely:
  
  ${ secrets_list }
  
  ---
  
  To finish setup:

  1. [Go to your actions page](https://github.com/${ installer.owner_name }/${ installer.repo_name }/actions) to see the first test being run. It may take a minute, but if all the information was correct it should pass and get a green checkmark.
  1. Go to [the pull request](${ installer.pull_url }).
  1. [Request a review](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review) of that PR or just merge it.
  1. If the test fails the first time and gets a red "x", [rerun the test (a.k.a. the job)](https://docs.github.com/en/actions/managing-workflow-runs/re-running-a-workflow). If it fails again, contact us.
  1. Delete the [personal access token](https://github.com/settings/tokens) you created.

  ---
  
  Write your first test:
  
  1. Pull the new code into a new Project.
  1. In the Playground, go to your Sources folder.
  1. Add a new file called 'interview_loads.feature'.
  1. Copy this code into the example file:
  
        <pre>
      @load
      Feature: Interviews load

        Scenario: \\_\\_\\_\\_ loads with no error
          Given I start the interview at "\\_\\_\\_\\_"
        </pre>

  5. Replace `____` with the name of the YAML file you're testing.
  1. Save the file.
  1. On your Packages page Sources section, select the file.
  1. Save the package.
  1. Commit the change to GitHub on a new branch.
  1. [Go to your actions page](https://github.com/${ installer.owner_name }/${ installer.repo_name }/actions) and explore.
  1. If it passes, make a pull request, request a review, and get the branch merged in.

  ---
  
  You can read some rough docs at [https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing/).
  
  ---
  
  If you have some feedback, we would love to hear from you. [Make an "issue" in our repository](https://github.com/plocket/docassemble-ALAutomatedTestingTests/issues/new) or let us know in chat!
buttons:
  - Restart: restart
comment: |
  TODO: Should we offer to delete their personal access token for them in the interview itself? Do we have enough permissions?
  TODO: Implement feedback form instead of linking issues. See AL core for that coming soon.
  TODO: Add link to documentation on writing tests.
---
event: next_steps_org
question: |
  Next steps
subquestion: |
  [Check that you have set up the secrets for your organization](https://github.com/organizations/${ installer.owner_name }/settings/secrets/actions)
  
  You should be finished. Your contributors can now use this interview to set up testing for their repositories without the need for special permissions.
buttons:
  - Restart: restart
---
id: show_errors
event: show_errors
question: |
  Sorry, something went wrong
subquestion: |
  % for error in installer.errors:
  **Error: ${ error.status if error.status else '' } ${ error.data[ 'message' ] }**${ '[BR]' + error.data[ 'details' ] }
  <hr/>
  
  % endfor
---
depends on: da_url_error
code: |
  installer.da_url_error = da_url_error.content
---
template: da_url_error
content: |
  Cannot validate the interview URL **"${ installer.playground_url }"**. Example of a valid URL:[BR]
  `https://dev.court-wizards.org/interview?i=docassemble.playground222ProjectName%3Asome_file.yml` [BR]
  If you are sure you have the whole URL of a running interview, please [file an issue](https://github.com/plocket/docassemble-ALAutomatedTestingTests) and include your interview URL in the report.
---
depends on: github_url_error
code: |
  installer.github_url_error = github_url_error.content
---
template: github_url_error
content: |
  Cannot validate the GitHub URL **"${ installer.repo_url }"**. Example of a valid URL:
  
  `https://github.com/owner_name/repo_name`
  
  If you are sure you have the correct GitHub URL, please [file an issue](https://github.com/plocket/docassemble-ALAutomatedTestingTests) and include the GitHub URL.
---
depends on: github_token_error
code: |
  installer.github_token_error = github_token_error.content
---
template: github_token_error
content: |
  The permission levels of that [Github personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) are not sufficient. Are you sure it has 'repo' and 'workflow' level permissions? You can try copying and pasting it again or you can try [making a new one](https://github.com/settings/tokens).
---
depends on: github_repo_not_found_error
code: |
  installer.github_repo_not_found_error = github_repo_not_found_error.content
---
template: github_repo_not_found_error
content: |
  GitHub cannot find the **${ installer.repo_name }** repository owned by the owner **${ installer.owner_name }**. Example of a valid URL:
  
  `https://github.com/owner_name/repo_name`
  
  You gave the repository address of **${ installer.repo_url }**. Are you sure that is correct?
---
depends on: github_access_error
code: |
  installer.github_access_error = github_access_error.content
---
template: github_access_error
content: |
  The user **${ installer.user_name }** does not have admin access to change the files or ["SECRETS"](https://docs.github.com/en/actions/reference/encrypted-secrets) in the **${ installer.repo_name }** repository owned by the owner **${ installer.owner_name }**. You can ask the admin to give correct access.
---
depends on: github_branch_name_error
code: |
  installer.github_branch_name_error = github_branch_name_error.content
---
template: github_branch_name_error
content: |
  It looks like all the allowed branch names are taken. To solve this, delete some of the branches that start with "${ installer.default_branch_name }".
---
