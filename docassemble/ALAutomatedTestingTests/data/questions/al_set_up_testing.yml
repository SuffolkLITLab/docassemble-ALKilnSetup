metadata:
  title: Set up AL automated testing
  short title: Set up AL testing
  description: Set up AssemblyLine automated testing for your docassemble package
  comment: Test the automated integrated testing library for AssemblyLine
---
features:
  question back button: True
---
modules:
  - .al_set_up_testing
---
objects:
  - installer: TestInstaller
---
include:
  - al_testing_files_to_push.yml
---
# I've done this once before. Trust me...
mandatory: True
code: |
  # for dev
  installer.repo_url = 'https://github.com/plocket/install'
  installer.playground_url = 'https://apps-dev.suffolklitlab.org/interview?i=docassemble.playground12ALTestingGHSendFiles%3Aal_set_up_testing.yml#page4'
  
  # handle errors
  if len( installer.errors ) > 0:
    show_errors
  
  intro
  
  # da stuff
  installer.password
  set_da_info
  
  # github stuff
  installer.token
  set_github_auth
  
  # confirm
  is_ready
  
  # update github
  update_github
  
  #instructions
  next_steps
---
code: |
  installer.set_github_auth()
  set_github_auth = True
---
code: |
  # These vars need to be defined before creating a branch.
  # Otherwise, because of da execution behavior, they cause
  # loops that end up creating 5 branches. It seemed to make
  # sense to put them in here.
  installer.env_example_str = installer.env_example.content
  installer.example_test_str = installer.example_test.content
  installer.gitignore_str = installer.gitignore.content
  installer.package_json_str = installer.package_json.content
  installer.run_form_tests_str = installer.run_form_tests.content
  installer.update_github()
  update_github = True
---
# TODO: Add link to docs where we explain how the library makes a project, etc.
# TODO: Add links to the actual github repo and files and folders
# TODO: only show 'other than you' if the person is logged in
id: intro
question: |
  Set up AL automated integrated testing
subquestion: |
  This interview will help you set up automated integrated GitHub testing for your docassemble project.
  
  Your answers will be encrypted end-to-end and on the server. No one other than you will have access to it. You **must** make sure your GitHub account has permission to change files in the correct repository.

  :clock: This could take about 15 minutes
  
  We will need you to give us:
  
  1. A [GitHub personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) with 'repo' level permissions.
  1. Your docassemble testing account's sign-in information. That can be your account if you want it to be.

  This tool will add some files to different folders in your interview's GitHub repository:

  1. `tests/features/example_test.feature` is a very simple example of a test.
  1. `.github/workflows/run_interview_tests.yml` tells GitHub when and how to run the tests.
  1. `package.json` tells GitHub what packages the tests need.
  1. `.gitignore` is for developers who want to work in their local environment.
  1. `.env-example` can help guide developers who want to work in their local environment.
  
  It will also add 3 [secrets](https://docs.github.com/en/actions/reference/encrypted-secrets): PLAYGROUND_EMAIL, PLAYGROUND_PASSWORD, and PLAYGROUND_ID

continue button field: intro
---
id: server info
question: |
  Docassemble
subquestion: |
  Use the information for the account that should run the tests to answer the questions below. You can use your own account as the testing account.
fields:
  - Testing account's email: installer.email
    datatype: email
  - Testing account's password: installer.password
    datatype: password
  - note: |
      From inside the testing account, hit 'Save and Run' in the YAML file you want to test. What is the URL in the address bar? Example of a valid URL:[BR]
      `https://dev.court-wizards.org/interview?i=docassemble.playground222ProjectName%3Asome_file.yml#page2`"
  - Interview URL: installer.playground_url
terms:
  Interview URL: |
    The interview URL will give us the account's Playground ID and the address of the server that the account is on.
---
# da info
code: |
  installer.set_da_info()
  set_da_info = True
---
# TODO: Add instructions on how to find the GitHub repo url on Packages page (maybe point to docs)
id: github auth
question: |
  GitHub authorization
subquestion: |
  In order to change files in your GitHub repository, we need permission. If you have permission to change the files of the repository, you can give us permission too.
  
  To do that, create a [personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token). You can delete the token any time after confirming the setup has worked. You can also use a new one anytime.
fields:
  - GitHub repository URL: installer.repo_url
    help: "The repository's URL will give us the name of the repo and its owner."
  - Personal access token: installer.token
    datatype: password
    help: "As long as you have permission to change the repository's files, your personal access token will give us permission to change them too."
---
id: confirm info
question: |
  Are you ready?
review:
  - Edit: installer.playground_url
    button: |
      #####Docassemble info
      
      **Email of testing account**:[BR]
      ${ installer.email }
      
      **Playground ID**: ${ installer.playground_id }
      
      **URL of running testable interview**:[BR]
      [${ installer.playground_url }](${ installer.playground_url })
  - Edit: installer.repo_url
    button: |
      #####GitHub info
      **Your username**:[BR]
      ${ installer.user_name }
      
      **Repository URL**:[BR]
      [https://github.com/${ installer.owner_name }/${ installer.repo_name }](https://github.com/${ installer.owner_name }/${ installer.repo_name })
continue button field: is_ready
---
# TODO: Add link to PR if it was made
# TODO: Add link to actions page if it was merged with default
# TODO: Add link to documentation (maybe put instructions for failing runs in there)
# TODO: Use the github feedback functionality AL provides
event: next_steps
question: |
  Next steps
subquestion: |
  Instructions to come here
comment: |
  % if defined( 'installer.pull_url' ):
  1. Check [the pull request](${ installer.pull_url }) and merge it in if it looks good.
  1. Once you've merged your pull request into your default branch (usually 'main') [go to your actions page](https://github.com/${ installer.owner_name }/${ installer.repo_name }/actions) to see the first practice test run.
  % elif defined( 'installer.owner_name' ):
  1. [Go to your actions page](https://github.com/${ installer.owner_name }/${ installer.repo_name }/actions) to see the example test being run.
  % endif
  1. If it fails the firs time, [rerun the test (job)](https://docs.github.com/en/actions/managing-workflow-runs/re-running-a-workflow).
  1. If it fails again:
      1. Check the .github/workflows/run_interview_tests.yml `env:` section to make sure your docassemble server name is right.
      1. If it is wrong, you can [edit the file in GitHub](https://docs.github.com/en/github/managing-files-in-a-repository/editing-files-in-your-repository).
      1. Edit the values of [the repository secrets](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository) manually to make sure that the email address, password, and id are for the correct account on the correct server. GitHub will not let you see the old values as that would be a breach of security.
      1. [Run the test manually](https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow#running-a-workflow-on-github).
      1. If tests still fail, [make an issue in our testing package's repository](https://github.com/plocket/docassemble-cucumber/issues).
  1. When that test run is over, see if you can [run the workflow manually from the actions menu](https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow#running-a-workflow-on-github).

  If everything passes, all should be well and you should be ready to write your first tests. Delete the [personal access token](https://github.com/settings/tokens) you created.
  
  If you are still having trouble or have some feedback, we would love you to [make an issue in our testing package's repository](https://github.com/plocket/docassemble-cucumber/issues).
---
id: show_errors
event: show_errors
question: |
  Sorry, something went wrong
subquestion: |
  % for error in installer.errors:
  **Error:** ${ error.data[ 'message' ] }
  
  % endfor
---
code: |
  installer.da_url_error = da_url_error.content
---
template: da_url_error
content: |
  Cannot validate the interview URL **"${ installer.playground_url }"**. Example of a valid URL:[BR]
  `https://dev.court-wizards.org/interview?i=docassemble.playground222ProjectName%3Asome_file.yml#page2` [BR]
  If you are sure you have the whole URL of a running interview, please report a bug and include your interview URL in the report.
---
---
