metadata:
  title: Set up AL automated testing
  short title: Set up AL testing
  description: Set up AssemblyLine automated testing for your docassemble package
  comment: Test the automated integrated testing library for AssemblyLine
---
modules:
  - .al_set_up_testing
---
objects:
  - installer: TestInstaller
  #- installer.run_interview_tests: DAFile
  #- installer.package_json: DAFile
  #- installer.example_test: DAFile
  #- installer.gitignore: DAFile
  #- installer.env_example: DAFile
---
mandatory: True
code: |
  # process files
  # make_pull_request()

  installer.token  # github authorization
  
  installer.set_github_auth()
  installer.create_branch()
  
  installer.playground_url
  installer.email
  
  installer.set_da_server_info()
  
  #installer.run_interview_tests.initialize( filename='run_interview_tests.yml' )
  #installer.package_json.initialize( filename='package.json' )
  #installer.example_test.initialize( filename='example_test.feature' )
  #installer.gitignore.initialize( filename='.gitignore' )
  #installer.env_example.initialize( filename='.env_example' )
  
  installer.run_interview_tests_str = run_interview_tests.content
  installer.gitignore = gitignore.content
  
  intro
  
  #installer.send_da_auth_secrets()
  #installer.create_file()
  
  check_stuff
---
# TODO: Add link to docs where we explain how the library makes a project, etc.
id: intro
question: |
  Welcome
subquestion: |
  This interview will help you set up automated integrated GitHub testing for your docassemble project.

  :clock: This could take about 30 minutes

  We will need to add some files to different folders in your interview's GitHub repository:

  1. `.github/workflows/run_interview_tests.yml` tells GitHub when and how to run the tests.
  1. `package.json` tells GitHub what packages the tests need.
  1. `tests/features/example_test.feature` is a very simple example of a test.
  1. `.gitignore` is for developers who want to work in their local environment.
  1. `.env-example` is for developers who want to work in their local environment.

  To do that, we will need you to do these things:

  1. Make an account on your docassemble server that will handle the testing. You can use your own account.
  1. Give us the authentication information for that account.
  1. Give us the url of the interview when it's being run from the Playground.
  1. Give us that interview's GitHub repository's url address.
  1. [Create a GitHub personal access token for your GitHub account and give it 'repo' level permissions](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).
  1. Give us that personal access token.

continue button field: intro
---
# TODO: Add instructions on how to find the GitHub repo url on Packages page
id: github auth
question: |
  GitHub authorization
subquestion: |
  In order to change files in your GitHub repository, we need your permission. This information will be encrypted end-to-end and on the server. No one other than you will have access to it.
fields:
  - URL of the interview's GitHub repository: installer.repo_url
  - Personal access token: installer.token
    datatype: password
---
id: da auth
question: |
  Docassemble Login
subquestion: |
  Use the information for the account that should run the tests.
fields:
  - Email: installer.email
  - Password: installer.password
    datatype: password
---
# TODO: Use url to parse out id
id: server info
question: |
  What is your interview's address?
subquestion: |
  Hit 'Save and Run' in the YAML file you want to test. What is in the url?
fields:
  - URL address: installer.playground_url
---
comment: |
  # The below only contained the hidden file when it
  # exapanded and it was a PDF
  #${ zip_file( installer.package_json, {'.github': [{ 'workflows': [installer.run_interview_tests] }]}, installer.gitignore, filename="Image files.zip") }
  # The below downloaded an empty zip file
  #${ zip_file( installer.package_json,  filename="thing.zip") }
---
event: check_stuff
question: |
  Check the result
subquestion: |

  1. If you made a PR, see the PR that was made and merge it in
  1. Go to (link to repo's actions page) and see the example test being run.
  1. If it fails the firs time, [rerun the test (job)](https://docs.github.com/en/actions/managing-workflow-runs/re-running-a-workflow). If it fails again:
      1. Check the `.github/workflows/run_interview_tests.yml` to make sure your docassemble server name is in there correctly.
      1. Edit the values of [the repository secrets](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository) manually, making sure that they are for the correct account on the correct server.
      1. If tests still fail, [make an issue in our testing package's repository](https://github.com/plocket/docassemble-cucumber/issues).
  1. When that test run is over, try [running the workflow manually from the actions menu](https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow#running-a-workflow-on-github)

  If everything passes, all should be well and you should be ready to write your first tests. If you're still having trouble, [make an issue in our testing package's repository](https://github.com/plocket/docassemble-cucumber/issues).

---
comment: |
  [test runner](${ installer.run_interview_tests.url_for() })
  attachment code: |
    [ installer.run_interview_tests ]
---
comment: |
  attachments:
    - name: GitHub test-running action
      variable name: installer.run_interview_tests
      filename: run_interview_tests
      raw: True
      content file: run_interview_tests.yml
    - name: NPM package.json
      variable name: installer.package_json
      filename: package
      raw: True
      content file: package.json
    - name: Example test
      variable name: installer.example_test
      filename: example_test
      raw: True
      content file: example_test.feature
    - name: gitignore for local development
      variable name: installer.gitignore
      filename: .gitignore
      raw: True
      content file: .gitignore
    - name: Example of a .env file for local development
      variable name: installer.env_example
      filename: .env_example
      raw: True
      content file: .env_example
---
comment: |
  # Including the below will only download the two hidden
  # files and both will be PDFs
  #manual attachment list: True
  #allow downloading: True
  #zip filename: thing.zip
---
comment: |
  attachment code: |
    [ installer.run_interview_tests, installer.package_json, installer.example_test, installer.gitignore, installer.env_example ]
---
template: run_interview_tests
content: |
  Stuff ${ installer.repo_name }
---
template: gitignore
content: |
  Other stuff ${ installer.repo_name }