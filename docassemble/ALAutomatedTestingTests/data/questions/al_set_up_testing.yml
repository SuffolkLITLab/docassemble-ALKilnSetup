metadata:
  title: Set up AL automated testing
  short title: Set up AL testing
  description: Set up AssemblyLine automated testing for your docassemble package
  comment: Test the automated integrated testing library for AssemblyLine
---
modules:
  - .al_set_up_testing
---
objects:
  - installer: TestInstaller
---
mandatory: True
code: |
  # - [x] process files
  # - [ ] make_pull_request()
  # - [ ] Ask about commit message and related issue #?
  # - [ ] Ask if they want to just push to default branch?
  
  # For development
  installer.repo_url = 'https://github.com/plocket/install'
  installer.playground_url = 'https://apps-dev.suffolklitlab.org/interview?i=docassemble.playground12ALTestingGitHubAPI%3Aal_set_up_testing.yml#page1'
  
  installer.token  # github authorization
  installer.playground_url  # workflow and .env
  installer.email  # da authorization
  
  authorize_for_github
  set_da_server_info
  set_file_contents
  update_github
  
  check_stuff
---
code: |
  # TODO: This will overwrite file in existing branch if page is refreshed instead of a new branch being created. Is that what we want?
  installer.set_github_auth()
  authorize_for_github = True
---
code: |
  installer.set_da_server_info()
  set_da_server_info = True
---
code: |
  installer.run_interview_tests_str = run_interview_tests.content
  installer.package_json_str = package_json.content
  installer.example_test_str = example_test.content
  installer.gitignore_str = gitignore.content
  installer.env_example_str = env_example.content

  set_file_contents = True
---
code: |
  #installer.send_da_auth_secrets()
  installer.create_branch()
  installer.commit_files()
  installer.make_pull_request()
  update_github = True
---
# TODO: Add link to docs where we explain how the library makes a project, etc.
# TODO: Add links to the actual github repo and files and folders
# TODO: only show 'other than you' if the person is logged in
id: intro
question: |
  Set up AL automated integrated testing
subquestion: |
  This interview will help you set up automated integrated GitHub testing for your docassemble project. Your answers will be encrypted end-to-end and on the server. No one other than you will have access to it.

  :clock: This could take about 15 minutes
  
  We will need you to give us:
  
  1. A [GitHub personal token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) with 'repo' level permissions.
  1. Your docassemble testing account's sign in information. That can be your account if you want it to be.

  This tool will add some files to different folders in your interview's GitHub repository:

  1. `.github/workflows/run_interview_tests.yml` tells GitHub when and how to run the tests.
  1. `package.json` tells GitHub what packages the tests need.
  1. `tests/features/example_test.feature` is a very simple example of a test.
  1. `.gitignore` is for developers who want to work in their local environment.
  1. `.env-example` can help guide developers who want to work in their local environment.

continue button field: intro
---
# TODO: Add instructions on how to find the GitHub repo url on Packages page
id: github auth
question: |
  GitHub authorization
subquestion: |
  In order to change files in your GitHub repository, we need your permission.
fields:
  - URL of the interview's GitHub repository: installer.repo_url
  - Personal access token: installer.token
    datatype: password
---
# TODO: Use url to parse out id
id: server info
question: |
  Docassemble
subquestion: |
  Use the information for the account that should run the tests to answer the questions below. You can use your own account as the testing account.
fields:
  - Testing account's email: installer.email
  - Testing account's password: installer.password
    datatype: password
  - note: "From inside the testing account, hit 'Save and Run' in the YAML file you want to test. What is the URL in the address bar?"
  - Interview URL: installer.playground_url
---
# TODO: Add link to PR
event: check_stuff
question: |
  Check the result
subquestion: |
  1. If you made a PR, see the PR that was made and merge it in.
  1. Go to (link to repo's actions page) and see the example test being run.
  1. If it fails the firs time, [rerun the test (job)](https://docs.github.com/en/actions/managing-workflow-runs/re-running-a-workflow). If it fails again:
      1. Check the `.github/workflows/run_interview_tests.yml` to make sure your docassemble server name is in there correctly.
      1. Edit the values of [the repository secrets](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository) manually, making sure that they are for the correct account on the correct server.
      1. If tests still fail, [make an issue in our testing package's repository](https://github.com/plocket/docassemble-cucumber/issues).
  1. When that test run is over, try [running the workflow manually from the actions menu](https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow#running-a-workflow-on-github)

  If everything passes, all should be well and you should be ready to write your first tests. If you're still having trouble, [make an issue in our testing package's repository](https://github.com/plocket/docassemble-cucumber/issues).
---
# TODO: Make an interview that will generate a .env for people to download or maybe just copy/paste as it's a hidden file
template: env_example
content: |
  # Username and password to log in to a docassemble playground to run tests
  PLAYGROUND_EMAIL=example@example.com
  PLAYGROUND_PASSWORD=12345
  
  # Your PLAYGROUND_ID can be found in the url of an interview launched from that playground.
  # It should look something like this:
  # https://www.docassemble-server-url.com/interview?i=docassemble.playground[PLAYGROUND_ID]%3Ainterview.yml#page1
  # Example: https://www.docassemble-server-url.com/interview?i=docassemble.playground34%3Ainterview.yml#page1. 34 is the id.
  PLAYGROUND_ID=11111

  BASE_URL=https://www.docassemble-server-url.com
  REPO_URL=https://github.com/user_name/repo_name

  # Name of the branch on the Github repo to be tested.
  BRANCH_PATH=main

  # Tests will be generated for the buttons with the text
  # below (intended for testing different language translations)
  # Examples: Español, Tiếng Việt, Português, 中文, Kreyòl
  EXTRA_LANGUAGES=

  # Change this to DEBUG=1 to run tests in a visible browser
  DEBUG=
---
template: example_test
content: |
  @example_feature_tag
  Feature: An example test

  The tests in this file should cover
  - [x] Provide a template people can use to make their own tests.
  - [ ] Direct people to more documentation.
  - [ ] Find the ultimate question to life, the universe, and everything.

  @example_scenario_tag
  Scenario: Server finishes reloading
    Given I start the interview at "test"
---
template: gitignore
content: |
  tests/chromedriver
  *DS_Store*
  node_modules*
  .env
  npm-debug.log
  error*.jpg
  screenshot_*.jpg
  downloads_*
  *_lang_*.feature
  *_report_*
---
template: package_json
content: |
  {
    "name": "${ installer.repo_name }",
    "version": "0.1.0",
    "description": "",
    "main": "",
    "directories": {
      "test": "tests"
    },
    "scripts": {
      "test": "npm run langs_setup && npm run cucumber -- $@",
      "cucumber_base": "./node_modules/.bin/cucumber-js --require ./node_modules/docassemble-cucumber/lib/index.js",
      "cucumber": "run_cucumber(){ npm run cucumber_base -- \"$@\" tests/features/*.feature; }; run_cucumber",
      "langs": "npm run langs_setup && ./node_modules/.bin/cucumber-js --require ./node_modules/docassemble-cucumber/lib/index.js tests/features/*_lang*.feature",
      "langs_setup": "node_modules/.bin/da-langs 'tests/features/*.feature'",
      "langs_local": "npm run langs_setup && npm run local",
      "local": "npm run setup && npm run cucumber; npm run takedown",
      "setup": "node_modules/.bin/da-setup",
      "takedown": "node_modules/.bin/da-takedown"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/${ installer.user_name }/${ installer.repo_name }.git"
    },
    "author": "",
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/${ installer.user_name }/${ installer.repo_name }/issues"
    },
    "homepage": "https://github.com/${ installer.user_name }/${ installer.repo_name }#readme",
    "dependencies": {
      "bufferutil": "^4.0.1",
      "chai": "^4.2.0",
      "cucumber": "^6.0.5",
      "docassemble-cucumber": "^1.0.0",
      "dotenv": "^8.2.0",
      "mocha": "^7.2.0",
      "puppeteer": "^3.1.0",
      "utf-8-validate": "^5.0.2"
    }
  }
---
# The closing '}}' doesn't really need to be contained.
# It just seemed more consistent
template: run_interview_tests
content: |
  name: Test the interview

  on:
    push:
    workflow_dispatch:
      inputs:
        extra_languages:
          description: 'Optional. A list of comma separated language names visible on buttons or links that change the language of the interview. Overrides the EXTRA_LANGUAGES repo secret.'
          default: ''
        tags:
          description: 'Optional. Use a "tag expression" specify which tagged tests to run (https://cucumber.io/docs/cucumber/api/#tag-expressions)'
          default: ''

  jobs:

    puppeteer-tests:
      runs-on: ubuntu-latest

      strategy:
        matrix:
          node-version: [12.x]

      env:
        PLAYGROUND_EMAIL: ${ '${{' } secrets.PLAYGROUND_EMAIL ${ '}}' }
        PLAYGROUND_PASSWORD: ${ '${{' } secrets.PLAYGROUND_PASSWORD ${ '}}' }
        PLAYGROUND_ID: ${ '${{' } secrets.PLAYGROUND_ID ${ '}}' }
        BASE_URL: ${ installer.server_url }
        BRANCH_PATH: ${ '${{' } github.ref ${ '}}' }
        EXTRA_LANGUAGES: ${ '${{' } secrets.EXTRA_LANGUAGES ${ '}}' }

      name: Run Puppeteer tests
      steps:
        - name: Set languages
          run: echo "EXTRA_LANGUAGES=${ '${{' } github.event.inputs.extra_languages ${ '}}' }" >> $GITHUB_ENV
          if: ${ '${{' } github.event.inputs.extra_languages != '' ${ '}}' }
        - run: echo "REPO_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" >> $GITHUB_ENV
        - run: echo "Repo address is $REPO_URL"
        - name: Checkout
          uses: actions/checkout@v2
        - name: Setup environment
          uses: actions/setup-node@v1
          with:
            node-version: ${ '${{' } matrix.node-version ${ '}}' }
        - run: npm install
        - run: npm run setup
        - run: npm run test -- ${ '${{' } github.event.inputs.tags && format('"--tags" "{0}"', github.event.inputs.tags) ${ '}}' }
        - name: upload error artifacts
          uses: actions/upload-artifact@v2
          if: ${ '${{' } failure() ${ '}}' }
          with:
            name: errors
            path: ./**/error*.jpg
        - name: upload screenshot steps
          uses: actions/upload-artifact@v2
          # They will upload even if a previosu step has failed
          if: ${ '${{' } always() ${ '}}' }
          with:
            name: screenshots
            path: ./**/screenshot*.jpg
        - name: upload downloads
          uses: actions/upload-artifact@v2
          # They will upload even if a previous step has failed
          if: ${ '${{' } always() ${ '}}' }
          with:
            name: downloads
            path: ./**/downloads_*
        - name: upload report
          uses: actions/upload-artifact@v2
          # They will upload even if a previous step has failed
          if: ${ '${{' } always() ${ '}}' }
          with:
            name: report
            path: ./**/*_report_*
        - name: Cleanup
          if: ${ '${{' } always() ${ '}}' }
          run: npm run takedown
---