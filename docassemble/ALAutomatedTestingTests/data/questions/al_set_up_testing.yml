metadata:
  title: Set up AL automated testing
  short title: Set up AL testing
  description: Set up AssemblyLine automated testing for your docassemble package
  comment: Test the automated integrated testing library for AssemblyLine
---
features:
  question back button: True
  css:
    - styles.css
---
modules:
  - .al_set_up_testing
---
objects:
  - installer: TestInstaller
---
include:
  - al_testing_files_to_push.yml
---
# I've done this once before. Trust me...
mandatory: True
code: |
  ## for dev
  #installer.repo_url = 'https://github.com/plocket/install'
  #installer.playground_url = 'https://apps-dev.suffolklitlab.org/interview?i=docassemble.playground12ALTestingGHSendFiles%3Aal_set_up_testing.yml#page4'
  
  # show errors first thing on each loop
  if len( installer.errors ) > 0:
    show_errors
  
  intro
  
  if will_test_on_this_server:
    if not logged_into_test_account_on_interview_server:
      log_into_test_account
  
  # da stuff
  installer.password
  set_da_info
  
  # github stuff
  installer.token
  set_github_auth
  
  # confirm
  is_ready
  
  # update github
  update_github
  
  #instructions
  force_ask( 'next_steps' )
---
code: |
  installer.set_da_info()
  set_da_info = True
---
code: |
  installer.set_github_auth()
  set_github_auth = True
---
code: |
  # These vars need to be defined before creating a branch.
  # Otherwise, because of da execution behavior, they cause
  # loops that end up creating 5 branches. It seemed to make
  # sense to put them in here.
  installer.env_example_str = installer.env_example.content
  installer.example_test_str = installer.example_test.content
  installer.gitignore_str = installer.gitignore.content
  installer.package_json_str = installer.package_json.content
  installer.run_form_tests_str = installer.run_form_tests.content
  installer.update_github()
  update_github = True
---
auto terms:
  - the docassemble account where the tests will run: Remember that **you can use your own account** and you can always change this later.
---
# TODO: Add link to docs where we explain how the library makes a project, etc.
# TODO: Add links to the actual github repo and files and folders
# TODO: only show 'other than you' if the person is logged in
id: intro
question: |
  Set up AL automated integrated testing
subquestion: |
  This interview will help you set up automated integrated GitHub testing for a docassemble package.

  :clock: This could take about 40 minutes
  
  ---
  
  **Make sure:**
  
  * The package is in a GitHub repository.
  * You have admin permissions on the package's GitHub repository.
  * You are logged into the docassemble account where the tests will run.
  
  ---

  **Sneak Peak**

  This tool will add folders and files to the project:

  ${ files_list }
  
  It will add 3 [GitHub "SECRETS"](https://docs.github.com/en/actions/reference/encrypted-secrets) to the repository to store encrypted information safely:
  
  ${ secrets_list }
  
  ---
  
  Your answers will be encrypted end-to-end and on the server. No one other than you will have access to them.
  
continue button field: intro
---
template: files_list
content: |
  * `tests/features/example_test.feature` is a very simple example of a test.
  * `.github/workflows/run_interview_tests.yml` tells GitHub when and how to run the tests.
  * `package.json` lets GitHub load other packages it needs to run the tests.
  * `.gitignore` is for developers who want to work in their local environment.
  * `.env-example` can help guide developers who want to work in their local environment to set up the environment variables.
---
template: secrets_list
content: |
  * PLAYGROUND_EMAIL
  * PLAYGROUND_PASSWORD
  * PLAYGROUND_ID
---
id: on testing server
question: |
  Before we start
subquestion: |
  Look at the url of this page. Is this the server where the tests will run?
yesno: will_test_on_this_server
---
id: logged_into_test_account_on_interview_server
question: |
  What account are you logged in on?
subquestion: |
  Are you logged into the docassemble account where the tests will run?
yesno: logged_into_test_account_on_interview_server
---
id: log_into_test_account
question: |
  Before you continue
subquestion: |
  You will probably need to log into the account where the tests will run. Since this form is on the same server and you are not logged into that account, you can do one of 3 things:
  
  * Open an incognito window and log into that account there.
  * Go to a different browser to log into that account.
  * Leave this interview, log into the account, and start this interview again.

  Tap to continue when you have done one of those.

continue button field: log_into_test_account
---
id: server info
question: |
  Docassemble
subquestion: |
  These tests will create Projects in an account on your docassemble server, pull in the GitHub code, and run the interviews.
  
  Next:
  
  1. Decide on the docassemble account where the tests will run.
  1. Make sure you are logged into that account.
  1. [Make a new Project and pull in GitHub code for the package](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/github#get-github-code-into-your-playground). The Project name does not matter.
  
  Answer the questions below for the account. If you want to use your own account, put your own docassemble email and password below.
fields:
  - Email: installer.email
    datatype: email
  - Password: installer.password
    datatype: password
  - note: |
      In the Playground, open the YAML file for which you want automated tests. Run it. What is the URL in the address bar? Example:[BR]
      `https://dev.legal.org/interview?i=docassemble.playground22ProjectName%3Asome_file.yml`
  - Interview URL: installer.playground_url
auto terms:
  - the URL in the address bar: |
      The interview URL will give us the account's Playground ID and the address of the server that the account is on.    
---
# TODO: Add instructions on how to find the GitHub repo url on Packages page (maybe point to docs)
id: github auth
question: |
  GitHub authorization
subquestion: |
  You must be an admin on the GitHub repository so you can temporarily give this form permission to add files and set "SECRETS". Once you are logged in as an admin:
  
  1. Start making a [personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) for your GitHub account.
  1. Tap the checkbox for 'workflow' permissions. That should also trigger 'repo' permissions. This form needs both.
  1. Finish creating the token.
  1. Copy the token and paste it below.
fields:
  - Personal access token: installer.token
    datatype: password
    help: |
      The token must have 'repo' and 'workflow' permissions.
  - note: |
      We also need the GitHub repository URL of the package. Example:[BR]
      `https://github.com/LawMagic/docassemble-GreatForm`
  - GitHub URL: installer.repo_url
    help: |
      The repository's URL will give us the name of the repo and its owner.
---
id: confirm info
question: |
  Is all this information correct?
subquestion: |
  You will not be able to come back here after continuing.
review:
  - Edit: installer.playground_url
    button: |
      #####Docassemble account and server:
      
      * **Account email**:[BR]
      ${ installer.email }
      
      * **Account password**: Not shown
      
      * **URL for running testable interview**:[BR]
      [${ installer.playground_url }](${ installer.playground_url })
      
      ######**Your answers also gave us this information:**
      
      * **Account Playground ID**: ${ installer.playground_id }
      
      * **Server to test on**:[BR]
      ${ installer.server_url }
      
      ---
  - Edit: installer.repo_url
    button: |
      #####GitHub repo and permission
      
      * **Repository URL**:[BR]
      [https://github.com/${ installer.owner_name }/${ installer.repo_name }](https://github.com/${ installer.owner_name }/${ installer.repo_name })
      
      * **Admin personal token**: Not shown
      
      ######**Your answers also gave us this information:**
      
      * **Your username**:[BR]
      ${ installer.user_name }
      
      * **Owner of the repository**:[BR]
      ${ installer.owner_name }
      
      * **Package name**:[BR]
      ${ installer.package_name }
  - note: Continue when you are ready. You will not be able to come back to this page.
continue button field: is_ready
continue button label: Finish
---

---
event: next_steps
prevent going back: True
question: |
  Next steps
subquestion: |
  This should have created a [Pull Request in the package's GitHub repository](${ installer.pull_url }). New folders and files should have been added to the package:
  
  ${ files_list }
  
  Also, 3 [GitHub "SECRETS"](https://docs.github.com/en/actions/reference/encrypted-secrets) were set to store encrypted docassemble login information safely:
  
  ${ secrets_list }
  
  ---
  
  To finish setup:

  1. [Go to your actions page](https://github.com/${ installer.owner_name }/${ installer.repo_name }/actions) to see the first test being run. It may take a minute, but if all the information was correct it should pass and get a green checkmark.
  1. Go to [the pull request](${ installer.pull_url }).
  1. [Request a review](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review) of that PR or just merge it.
  1. If the test fails the first time and gets a red "x", [rerun the test (a.k.a. the job)](https://docs.github.com/en/actions/managing-workflow-runs/re-running-a-workflow). If it fails again, contact us.
  1. Delete the [personal access token](https://github.com/settings/tokens) you created.

  ---
  
  Write your first test:
  
  1. Pull the new code into a new Project.
  1. In the Playground, go to your Sources folder.
  1. Add a new file called 'interview_loads.feature'.
  1. Copy this code into the example file:
  
        <pre>
      @load
      Feature: Interview loads

        Scenario: \\_\\_\\_\\_ loads with no error
          Given I start the interview at "\\_\\_\\_\\_"
        </pre>

  5. Replace `____` with the name of the YAML file you're testing.
  1. Save the file.
  1. On your Packages page Sources section, select the file.
  1. Save the package.
  1. Commit the change to GitHub on a new branch.
  1. [Go to your actions page](https://github.com/${ installer.owner_name }/${ installer.repo_name }/actions) and explore.
  1. If it passes, make a pull request, request a review, and get the branch merged in.

  ---
  
  You can read some rough docs at [https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing/).
  
  ---
  
  If you have some feedback, we would love to hear from you. [Make an "issue" in our repository](https://github.com/plocket/docassemble-ALAutomatedTestingTests/issues/new) or let us know in chat!
buttons:
  - Restart: restart
comment: |
  TODO: Should we offer to delete their personal access token for them in the interview itself? Do we have enough permissions?
  TODO: Implement feedback form instead of linking issues. See AL core for that coming soon.
  TODO: Add link to documentation on writing tests.
---
id: show_errors
event: show_errors
question: |
  Sorry, something went wrong
subquestion: |
  % for error in installer.errors:
  **Error: ${ error.status if error.status else '' } ${ error.data[ 'message' ] }**${ '[BR]' + error.data[ 'details' ] }
  <hr/>
  
  % endfor
---
depends on: da_url_error
code: |
  installer.da_url_error = da_url_error.content
---
template: da_url_error
content: |
  Cannot validate the interview URL **"${ installer.playground_url }"**. Example of a valid URL:[BR]
  `https://dev.court-wizards.org/interview?i=docassemble.playground222ProjectName%3Asome_file.yml` [BR]
  If you are sure you have the whole URL of a running interview, please [file an issue](https://github.com/plocket/docassemble-ALAutomatedTestingTests) and include your interview URL in the report.
---
depends on: github_url_error
code: |
  installer.github_url_error = github_url_error.content
---
template: github_url_error
content: |
  Cannot validate the GitHub URL **"${ installer.repo_url }"**. Example of a valid URL:
  
  `https://github.com/owner_name/repo_name`
  
  If you are sure you have the correct GitHub URL, please [file an issue](https://github.com/plocket/docassemble-ALAutomatedTestingTests) and include the GitHub URL.
---
depends on: github_token_error
code: |
  installer.github_token_error = github_token_error.content
---
template: github_token_error
content: |
  The permission levels of that [Github personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) are not sufficient. Are you sure it has 'repo' and 'workflow' level permissions? You can try copying and pasting it again or you can try [making a new one](https://github.com/settings/tokens).
---
depends on: github_repo_not_found_error
code: |
  installer.github_repo_not_found_error = github_repo_not_found_error.content
---
template: github_repo_not_found_error
content: |
  GitHub cannot find the **${ installer.repo_name }** repository owned by the owner **${ installer.owner_name }**. Example of a valid URL:
  
  `https://github.com/owner_name/repo_name`
  
  You gave the repository address of **${ installer.repo_url }**. Are you sure that is correct?
---
depends on: github_access_error
code: |
  installer.github_access_error = github_access_error.content
---
template: github_access_error
content: |
  The user **${ installer.user_name }** does not have admin access to change the files or ["SECRETS"](https://docs.github.com/en/actions/reference/encrypted-secrets) in the **${ installer.repo_name }** repository owned by the owner **${ installer.owner_name }**. You can ask the admin to give correct access.
---
depends on: github_branch_name_error
code: |
  installer.github_branch_name_error = github_branch_name_error.content
---
template: github_branch_name_error
content: |
  It looks like all the allowed branch names are taken. To solve this, delete some of the branches that start with "${ installer.default_branch_name }".
---
