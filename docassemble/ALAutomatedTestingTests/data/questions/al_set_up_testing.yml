metadata:
  title: Set up AssemblyLine automated testing for your docassemble package
  short title: Set up AL testing
  comment: Test the automated integrated testing library for AssemblyLine
---
modules:
  - .al_set_up_testing
---
objects:
  - installer: TestInstaller
---
mandatory: True
code: |
  # process files
  # make_pull_request()
  
  #intro
  installer.token
  installer.set_github_auth()
  installer.playground_url
  installer.email
  installer.send_da_auth_secrets()
  
  check_stuff
---
# TODO: Add link to docs where we explain how the library makes a project, etc.
id: intro
question: |
  Welcome
subquestion: |
  This interview will help you set up automated integrated GitHub testing for your docassemble project.
  
  :clock: This could take about 30 minutes
  
  We will need to add some files to different folders in your interview's GitHub repository:
  
  1. `.github/workflows/run_interview_tests.yml` tells GitHub when and how to run the tests.
  1. `package.json` tells GitHub what packages the tests need.
  1. `tests/features/example_test.feature` is a very simple example of a test.
  1. `.gitignore` is for developers who want to work in their local environment.
  1. `.env-example` is for developers who want to work in their local environment.
  
  To do that, we will need you to do these things:
  
  1. Make an account on your docassemble server that will handle the testing. You can use your own account.
  1. Give us the authentication information for that account.
  1. Give us the url of the interview when it's being run from the Playground.
  1. Give us that interview's GitHub repository's url address.
  1. [Create a GitHub personal access token for your GitHub account](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).
  1. Give us that personal access token.
  
continue button field: intro
---
# TODO: Add instructions on how to find the GitHub repo url on Packages page
id: github auth
question: |
  GitHub authorization
subquestion: |
  In order to change files in your GitHub repository, we need your permission. This information will be encrypted end-to-end and on the server. No one other than you will have access to it.
fields:
  - URL of the interview's GitHub repository: installer.repo_url
  - Personal access token: installer.token
    datatype: password
---
id: da auth
question: |
  Docassemble Login
subquestion: |
  Use the information for the account that should run the tests.
fields:
  - Email: installer.email
  - Password: installer.password
    datatype: password
---
# TODO: Use url to parse out id
id: server info
question: |
  What is your interview's address?
subquestion: |
  Hit 'Save and Run' in the YAML file you want to test. What is in the url?
fields:
  - URL address: installer.playground_url
---
event: check_stuff
question: |
  Check the result
subquestion: |
  1. If PR - see the PR that was made and merge it in
  1. Go to (link to repo's actions page) and see the example test being run.
  1. If it fails the firs time, [rerun the test (job)](https://docs.github.com/en/actions/managing-workflow-runs/re-running-a-workflow). If it fails again:
      1. Check the `.github/workflows/run_interview_tests.yml` to make sure your docassemble server name is in there correctly.
      1. Edit the values of [the repository secrets](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository) manually, making sure that they are for the correct account on the correct server.
      1. If tests still fail, [make an issue in our testing package's repository](https://github.com/plocket/docassemble-cucumber/issues).
  1. When that test run is over, try [running the workflow manually from the actions menu](https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow#running-a-workflow-on-github)
  
  If everything passes, all should be well and you should be ready to write your first tests. If you're still having trouble, [make an issue in our testing package's repository](https://github.com/plocket/docassemble-cucumber/issues).
  
# TODO: Add link to testing docs when they're ready
---