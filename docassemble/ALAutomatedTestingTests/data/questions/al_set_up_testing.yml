metadata:
  title: Set up GitHub automated interview testing
  short title: Set up automated testing
  description: Set up GitHub automated testing for docassemble interviews. This tool was created through the Document Assembly Line project.
---
features:
  question back button: True
  question help button: True
  css:
    - styles.css
---
modules:
  - .al_set_up_testing
---
objects:
  - installer: TestInstaller
---
include:
  - al_testing_files_to_push.yml
---
mandatory: True
code: |
  ## for dev
  ##installer.repo_url = 'https://github.com/plocket/install'
  #installer.playground_url = 'https://apps-dev.suffolklitlab.org/interview?i=docassemble.playground12ALTestingGHSendFiles%3Aal_set_up_testing.yml#page4'
  #installer.email = 'a@example.com'
  #installer.password = 'asldkjflsdkjfldsjflsdjf'
  
  # show errors first thing on each loop
  if len( installer.errors ) > 0:
    show_errors
  
  # Role
  is_org_admin
  
  # Needs
  if secrets_need == 'org' or secrets_need == 'repo':
    get_secrets_info
  
  # Get and test github PAT (token) and either repo url or org name
  installer.token
  set_github_auth
  
  # confirm
  is_ready
  # send the secrets and files to github
  update_github
  
  force_ask( 'next_steps' )
---
code: |
  if will_test_on_this_server:
    if not logged_into_test_account_on_interview_server:
      log_into_test_account
      
  installer.password
  set_da_info
      
  get_secrets_info = True
---
code: |
  installer.set_org_secrets()
  set_org_secrets = True
---
code: |
  installer.set_da_info()
  set_da_info = True
---
code: |
  installer.set_github_auth()
  set_github_auth = True
---
code: |
  if wants_to_set_up_tests:
    # These vars need to be defined before creating a branch.
    # Otherwise, because of da execution behavior, they cause
    # loops that end up creating 5 branches. It seemed to make
    # sense to put them in here.
    installer.env_example_str = installer.env_example.content
    installer.example_test_str = installer.example_test.content
    installer.gitignore_str = installer.gitignore.content
    installer.package_json_str = installer.package_json.content
    installer.run_form_tests_str = installer.run_form_tests.content
    
  installer.update_github()
  update_github = True
---
auto terms:
  the docassemble account where the tests will run: Remember that **you can use your own account** and you can always change this later.
---
id: repo role
question: |
  Automated integrated testing for docassemble packages
subquestion: |
  This tool was created through the Document Assembly Line project.

  This tool helps developers or organizations set up automated integrated testing for docassemble interview packages that have a GitHub repository. GitHub will run the tests every time the code changes.
  
  :clock: These tasks can take up to 40 minutes. It can take longer if you are unfamiliar with GitHub or need to contact an account administrator.
  
  What you can set up depends on your situation and what kind of GitHub permissions you have.
fields:
  - Are you the admin of the {GitHub organization}?: is_org_admin
    datatype: yesnoradio
terms:
  - GitHub organization: If you don't know what a GitHub organization is, then you are not an admin of a GitHub organization.
help:
  label: What will this tool do?
  content: |
    To set up automated integrated testing, it will:
    
    * Help you set up these GitHub secrets if needed:
    
      ${ secrets_list }
      
    * Help you add files to a specific repository if needed. It will create a new branch on GitHub for those files and make a pull request with that branch. These files will be added:
    
    ${ files_list }
    
    If you are not an admin, you may need to speak to an admin to get different pieces of information.
---
# Note: any repo writer can set repo secrets
id: needs
question: |
  What do you need to do?
subquestion: |
  % if is_org_admin:
  You said you are the admin of an organization.
  
  Using this form you can {set up GitHub secrets}, or set up the testing package files in a repository, or both. If you set up secrets, you can choose to create secrets for your organization or for a specific repository.
  % else:
  From your answer, it sounds like you are a developer on the repository and can change files in the repository.
  
  Using this form you can set up GitHub secrets for the repository, set up the testing package files in the repository, or both.
  % endif
  
  ---
  
  First, we'll ask about the GitHub secrets.
  
  %if not is_org_admin:
  **Pause here.** In order to answer the next question, you may have to contact an admin.
  
  Ask your repository or GitHub organization admin whether the {right GitHub secrets} have been set up already for the repository or for the organization. You can tell them to look at the repository's GitHub secrets setting.
  % endif
fields:
  # If is org admin
  - What kind of secrets do you need to set up?: secrets_need
    datatype: radio
    show if:
      code: |
        is_org_admin
    choices:
      - My organization's secrets: org
      - A repository's secrets: repo
      - Someone has set up the secrets already: none
  # Not org admin
  - What do you need to do about secrets?: secrets_need
    datatype: radio
    show if:
      code: |
        not is_org_admin
    choices:
      - Someone has set up the repository or organization secrets already: none
      - I need to set up the repository's secrets: repo
  # Always
  - note: |
      You can read more about GitHub secrets using the 'About GitHub secrets button at the bottom of this page. It may just make things more confusing, though.
      
      ---
      
      Next, we'll ask about setting up testing for a specific package's repository.
  - Do you need to set up testing for a specific package?: wants_to_set_up_tests
    datatype: yesnoradio
validation code: |
  if secrets_need == 'none' and not wants_to_set_up_tests:
    validation_error("If you don't want to set secrets and don't want to set up tests, there is nothing to do here.")
terms:
  right GitHub secrets: ${ secrets_list_one_line }
help:
  label: About GitHub secrets
  content: ${ about_secrets }
---
template: secrets_list_one_line
content: |
  The secrets needed are PLAYGROUND_EMAIL, PLAYGROUND_PASSWORD, PLAYGROUND_ID, and SERVER_URL
---
template: secrets_popover
content: |
  Tap the "About GitHub Secrets" button at the bottom of this page to learn why the tests need GitHub secrets and how to see what secrets you already have.
---
template: about_secrets
content: |
    **What are GitHub secrets?**

    [GitHub secrets](https://docs.github.com/en/actions/reference/encrypted-secrets) encrypt and store sensitive information that the automated tests need. To read more about why, go to the last section on this page.
    
    ---
    
    **Who can set a GitHub secret?**
    
    An admin of a GitHub **organization** can set the secrets for that GitHub organization. They can do that through this tool or just on GitHub itself. They can also set the secrets in repositories that belong to that organization.
    
    An admin of a GitHub **repository** can set the secrets for that GitHub repository on the GitHub website itself.
    
    A collaborator of a GitHub **repository** can set the secrets for the GitHub repository through **this tool**. A non-admin is unable to set secrets on GitHub itself. Yes, it's confusing. We don't know GitHub works that way ¯\_(ツ)_/¯
    
    ---

    **Does my repository or organization already have GitHub secrets?**
    
    A non-admin cannot see organization or repository secrets. They will have to ask an admin.
    
    If you're not sure what secrets your organization has set, ask an **org admin** to take a look. They can [see them in the same place that they can create them](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-an-organization).

    If you're not sure what secrets your repository has, ask a **repository admin** to take a look. They can [see them in the same place that they can create them](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository).

    If you're not sure whether a repository has access to its organization's secrets, ask a repository admin to take a look. They can see those on the repository's secrets page too, as described above.

    If the organization has these secrets, but the secrets are not showing up in the package's repository, the organization admin may need to [change the access settings for the secret](https://docs.github.com/en/actions/reference/encrypted-secrets#reviewing-access-to-organization-level-secrets).
    
    ---

    **Why do these tests need GitHub secrets?**

    When you commit or push a file to GitHub, the automated tests will tell GitHub to:
    
    1. Log into a docassemble account on your server.
    1. Make a new Project. The name will start with "testing".
    1. Pull your package's GitHub code from the branch that they are testing.
    1. Go through the interview as if the tests were a real person.
    1. Delete the Project it created.

    To do some of those steps, the automated tests need to know a user name and password to use to log into a developer account on your server.

    If you choose to set up secrets, your answers will help this tool set these secrets:

    ${ secrets_list }
---
id: on testing server
question: |
  Before we start
subquestion: |
  Look at the url of this page. Is this the server where the tests will run?
yesno: will_test_on_this_server
---
id: logged_into_test_account_on_interview_server
question: |
  What account are you logged in on?
subquestion: |
  You, your team, or your organiztion might {want to set up an account just for running tests}. The tests can also just run on your account.

  Are you logged into the docassemble account where the tests will run?
yesno: logged_into_test_account_on_interview_server
terms:
  want to set up an account just for running tests: |
    Tap the "Why have a testing account?" button below to learn why you might want to set up an account just for running tests.
help:
  label: Why have a testing account?
  content: ${ why_special_account }
---
template: why_special_account
content: |
  **Why would you want to set up an account just for testing?**
  
  First, GitHub will use that account. It will create Projects in there, put files in those Projects, then it will delete those Projects. If a developer is using that docassemble account, they may find it confusing.
  
  Secondly, it may cause problems later on. Imagine that the tests are set up to run on a developer's account. Then the developer leaves the team and deletes their account. The tests will fail because the account is missing.
---
id: log_into_test_account
question: |
  Before you continue
subquestion: |
  To help you answer the following questions, you may want to log into the account where the tests will run. Since this form is on the same server as this interview and you are not logged into that account, you can do one of 3 things:
  
  * [Open an incognito window](https://techbrightsystems.com/incognito-mode/) and log into that account there.
  * Log into that account on a different browser.
  * Leave this interview, log into that account, and start this interview again.

  Tap to continue when you are ready.

continue button field: log_into_test_account
---
id: da server info
question: |
  GitHub secrets
subquestion: |
  As described, {the tests need some GitHub secrets}. This tool will help you set up these encrypted [GitHub secrets](https://docs.github.com/en/actions/reference/encrypted-secrets):
  
  ${ secrets_list }

  If you have not already done so:
  
  1. Decide on the docassemble account where the tests will run.
  1. Make sure you are logged in there.
  1. Answer the questions below for that account. If you want to use your own account, put your own docassemble email and password below.
fields:
  - Account email: installer.email
    datatype: email
  - Account password: installer.password
    datatype: password
  - note: |
      Go to the Playground of the account and run any working YAML file. For example, **test.yml**. What is {the URL in the address bar}? Example:[BR]
      **https://legal-dev.org/interview?i=docassemble.playground22%3Atest.yml**
  - Interview URL: installer.playground_url
terms:
  the URL in the address bar: |
    The interview URL will give us the account's Playground ID and the address of the server that the account is on.
  the tests need some GitHub secrets: ${ secrets_popover }
help:
  label: About GitHub secrets
  content: ${ about_secrets }
---
# TODO: Can an org admin sometimes not have push access to an org repo?
# TODO: Will org admins try to also add tests to a non-org repo?
# [personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)
id: github auth
question: |
  GitHub
subquestion: |
  We need some authorization and some information to do operations in GitHub.

  ---

  GitHub needs you to authorize this tool to make changes on GitHub. You can do that by creating a personal access token (PAT).
  
  You will create a PAT in **your** GitHub account as you personally are the one giving this permission. You can delete the PAT at the end.
  
  To answer the questions, do these steps:
  
  1. [Log into your GitHub account](https://github.com).
  1. Follow directions to start making your personal access token on GitHub. You can find the directions in a section at [this GitHub documentation page](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).
  % if secrets_need == 'org':
  1. Tap the checkbox for "admin:org" permissions.
  % endif
  % if wants_to_set_up_tests or secrets_need == 'repo':
  1. Tap the checkbox for "workflow" permissions.
  % endif
  1. Finish creating the personal access token.
  1. Copy the token and paste it below.
fields:
  - Personal access token: installer.token
    datatype: password
    help: |
      The token must have ${ token_permissions_scope } permissions.
  - note: |
      ---
      
      Next, we need the URL of the GitHub repository. Example:[BR]
      **https://github.com/TheLawFantastic/docassemble-GreatForm**
    show if:
      code: |
        wants_to_set_up_tests or secrets_need == 'repo'
  - Repo URL: installer.repo_url
    help: |
      This should be the repository that stores the code of the interviews that you want to test. The repository's URL will give us the name of the repo and its owner.
    show if:
      code: |
        wants_to_set_up_tests or secrets_need == 'repo'
  - note: |
      ---
      
      Next, we need the name of the GitHub organization. Example:[BR]
      **SuffolkLITLab**
    show if:
      code: |
        not wants_to_set_up_tests and secrets_need == 'org'
  - Organization name: installer.owner_name
    show if:
      code: |
        not wants_to_set_up_tests and secrets_need == 'org'
---
# TODO: discuss: Really if just setting repo secrets, only need repo permissions, but do we want to make it that complicated/inconsistent?
template: token_permissions_scope
content: |
  % if secrets_need == 'org' and wants_to_set_up_tests:
  "admin:org", "workflow", and "repo"
  % elif secrets_need == 'org' and not wants_to_set_up_tests:
  "admin:org"
  % else:
  "workflow" and "repo"
  % endif
---
template: files_list
content: |
  * **tests/features/example_test.feature** is a very simple example of a test.
  * **.github/workflows/run_interview_tests.yml** tells GitHub when and how to run the tests and save the files created.
  * **package.json** lets GitHub load other packages it needs to run the tests.
  * **.gitignore** is for developers who want to work in their local environment.
  * **.env-example** can help guide developers who want to work in their local environment to set up the environment variables.
---
template: secrets_list
content: |
  * PLAYGROUND_EMAIL
  * PLAYGROUND_PASSWORD
  * PLAYGROUND_ID
  * SERVER_URL
---
id: confirm info
question: |
  Is this information correct?
subquestion: |
  You will not be able to come back here after continuing.
review:
  - Edit: installer.playground_url
    button: |
      #####Docassemble account and server:
      
      * **Account email**:[BR]
      ${ installer.email }
      
      * **Account password**: Not shown
      
      * **URL for running testable interview**:[BR]
      [${ installer.playground_url }](${ installer.playground_url })
      
      ######**Your answers also gave us this information:**
      
      * **Account Playground ID**: ${ installer.playground_id }
      
      * **Server to test on**:[BR]
      ${ installer.server_url }
      
      ---
  - Edit: installer.token
    button: |
      #####GitHub repo and permission
      
      * **Personal access token**: \*\*\*\*${ installer.token[-4:] }
      
      % if not wants_to_set_up_tests and secrets_need == 'org':
      * **GitHub organization**:[BR]
      ${ installer.owner_name }
      % else:
      * **Repository URL**:[BR]
      [https://github.com/${ installer.owner_name }/${ installer.repo_name }](https://github.com/${ installer.owner_name }/${ installer.repo_name })
      % endif
      
      ######**Your answers also gave us this information:**
      
      * **Your username**:[BR]
      ${ installer.user_name }
      
      % if wants_to_set_up_tests or secrets_need == 'repo':
      * **Owner of the repository**:[BR]
      ${ installer.owner_name }
      % endif
      
      % if wants_to_set_up_tests:
      * **Package name**:[BR]
      ${ installer.package_name }
      
      The new branch will be named **${ installer.branch_name }**.
      % endif
      
      ---
  - note: |
      There may be a few more steps after this to finish up. Continue when you are ready.
      
      You will not be able to come back to this page.
continue button field: is_ready
continue button label: Send to GitHub
---
event: next_steps
prevent going back: True
question: |
  Your GitHub settings should be updated!
subquestion: |
  **Finish setting up**
  
  % if secrets_need == 'org' or secrets_need == 'repo':
  3 [GitHub secrets](https://docs.github.com/en/actions/reference/encrypted-secrets) were set to store {encrypted docassemble login information} safely:
  
  ${ secrets_list }
  % endif
  
  % if secrets_need == 'repo' or secrets_need == 'org':
  Secrets:
  % endif
  
  % if secrets_need == 'repo':
  [Make sure the repository secrets got created](https://github.com/${ installer.owner_name }/${ installer.repo_name }/settings/secrets/actions).
  % endif
  
  % if secrets_need == 'org':
  1. [Make sure the organization secrets got created]( https://github.com/organizations/${ installer.org.login }/settings/secrets/actions).
  1. Make sure the secrets have the [access settings](https://docs.github.com/en/actions/reference/encrypted-secrets#reviewing-access-to-organization-level-secrets) you need.
  % endif
  
  % if secrets_need == 'org':
  Team members that are collaborators can now use this interview to set up tests for their repositories. When they ask you if organization secrets or repo secrets have been set up, you can answer 'yes'.
  % endif
  
  % if wants_to_set_up_tests:
  % endif
  
  % if wants_to_set_up_tests:
  This tool should have created a new branch in the GitHub repository. On that branch, these new folders and files should have been added:
  
  ${ files_list }
  
  This tool should also have made a new pull request for you. To finish, follow these instructions regarding that pull request.
  
  1. [Follw this link to the pull request](${ installer.pull_url }) to make sure it got created.
  1. [Follow this link to your actions page](https://github.com/${ installer.owner_name }/${ installer.repo_name }/actions) to see the first test being run on the new branch. It may take up to a few minutes to show up, but if all the information was correct it should pass and get a green checkmark. If the test fails the first time and gets a red "x", [rerun the test (a.k.a. the job)](https://docs.github.com/en/actions/managing-workflow-runs/re-running-a-workflow). If it fails again, contact us.
  1. If you have a partner working on this with you, [follow the instructions at this link to request a review of that pull request](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review) from the partner. You can also see [our documents about requesting a review](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/github#request-others-test-your-code). If you are not working with a partner, you can just [follow these instructions to merge the pull request](https://docs.github.com/en/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request).
  1. [Follow this link to the personal access token](https://github.com/settings/tokens) you created and delete it.
  
  ---
  % endif
  
  % if not wants_to_set_up_tests:
  [Follow this link to the personal access token](https://github.com/settings/tokens) you created and delete it.
  
  ---
  % endif
  
  If you want to go for a wild ride, you can read some rough docs at [https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing/).
  
  ---
  
  If you have some feedback, we would love to hear from you! Let us know in chat or [make a public "issue" in our repository](https://github.com/plocket/docassemble-ALAutomatedTestingTests/issues/new).
buttons:
  - Start again: restart
terms:
  encrypted docassemble login information: ${ secrets_popover }
comment: |
  TODO: Should we offer to delete their personal access token for them in the interview itself? Do we have enough permissions?
  TODO: Implement feedback form instead of linking issues. See AL core for that.
  TODO: Add link to documentation on writing tests.
---
id: show_errors
event: show_errors
question: |
  Sorry, something went wrong
subquestion: |
  % for error in installer.errors:
  **Error: ${ error.status if error.status else '' } ${ error.data[ 'message' ] }**[BR]
  ${ error.data[ 'details' ] }
  
  ---
  % endfor
  
  If you cannot find a way to fix the problem, contact us in chat or [file a public issue](https://github.com/plocket/docassemble-ALAutomatedTestingTests).
---
depends on: da_url_error
code: |
  installer.da_url_error = da_url_error.content
---
template: da_url_error
content: |
  Cannot validate the interview URL **"${ installer.playground_url }"**. Example of a valid URL:[BR]
  **https://dev.court-wizards.org/interview?i=docassemble.playground222ProjectName%3Asome_file.yml** [BR]
---
depends on: github_token_error
code: |
  installer.github_token_error = github_token_error.content
---
template: github_token_error
content: |
  GitHub cannot find that [personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token). You can try copying and pasting it again or you can try [making a new one](https://github.com/settings/tokens).
---
depends on: github_pat_scopes_error
code: |
  installer.github_pat_scopes_error = github_pat_scopes_error.content
---
template: github_pat_scopes_error
content: |
  What you are trying to do needs ${ token_permissions_scope } scope(s). The permission scope(s) of the [Github personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) ending in \*\*\*${ installer.token[-4:] } are **${ comma_and_list( installer.github.oauth_scopes ) }**. You can try copying and pasting the token again or you can try [making a new one](https://github.com/settings/tokens). (This disobeys plain language guidelines, sorry)
---
depends on: github_url_error
code: |
  installer.github_url_error = github_url_error.content
---
template: github_url_error
content: |
  Cannot validate the GitHub URL **"${ installer.repo_url }"**. Example of a valid URL:
  
  **https://github.com/owner_name/repo_name**
---
depends on: github_repo_not_found_error
code: |
  installer.github_repo_not_found_error = github_repo_not_found_error.content
---
template: github_repo_not_found_error
content: |
  GitHub cannot find the **${ installer.repo_name }** repository owned by the owner **${ installer.owner_name }**. Example of a valid URL:
  
  **https://github.com/owner_name/repo_name**
  
  You gave the repository address of **${ installer.repo_url }**. Are you sure that is correct?
---
depends on: not_collaborator_error
code: |
  installer.not_collaborator_error = not_collaborator_error.content
---
template: not_collaborator_error
content: |
  The user **${ installer.user_name }** is not a collaborator in the **${ installer.repo_name }** repository owned by the owner **${ installer.owner_name }**. You can ask the admin to give correct access.
---
depends on: permissions_error
code: |
  installer.permissions_error = permissions_error.content
---
template: permissions_error
content: |
  The user **${ installer.user_name }** has **${ installer.permissions }** permissions for the **${ installer.repo_name }** repository, but needs **write**, **maintain**, or **admin** permissions. You can ask the admin to give you correct access. **${ installer.owner_name }** is the owner.
---
depends on: org_does_not_exist_error
code: |
  installer.org_does_not_exist_error = org_does_not_exist_error.content
---
template: org_does_not_exist_error
content: |
  GitHub cannot find an organization called **${ installer.owner_name }**. 
---
depends on: not_an_org_member_error
code: |
  installer.not_an_org_member_error = not_an_org_member_error.content
---
template: not_an_org_member_error
content: |
  **${ installer.user_name }** might not be a **member** of **${ installer.owner_name }**. Try double checking the names.
---
depends on: not_org_admin_error
code: |
  installer.not_org_admin_error = not_org_admin_error.content
---
template: not_org_admin_error
content: |
  **${ installer.user_name }** might not be an **admin** of the organization **${ installer.owner_name }**. Try double checking the names.
---
depends on: github_branch_name_error
code: |
  installer.github_branch_name_error = github_branch_name_error.content
---
template: github_branch_name_error
content: |
  It looks like all the allowed branch names are taken. To solve this, delete some of the branches that start with "${ installer.default_branch_name }".
