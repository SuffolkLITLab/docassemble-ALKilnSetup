metadata:
  title: Set up GitHub automated interview testing
  short title: Set up automated testing
  description: Set up GitHub automated testing for docassemble interviews. This tool was created through the Document Assembly Line project.
---
features:
  question back button: True
  question help button: True
  css:
    - styles.css
---
modules:
  - .al_set_up_testing
---
objects:
  - installer: TestInstaller
---
include:
  - al_testing_files_to_push.yml
---
mandatory: True
code: |
  ## for dev
  #installer.repo_url = 'https://github.com/plocket/docassemble-ALAutomatedTestingTests'
  #installer.playground_url = 'https://apps-dev.suffolklitlab.org/interview?i=docassemble.playground12ProjectName%3Aal_set_up_testing.yml#page4'
  #installer.email = 'a@example.com'
  #installer.password = 'asldkjflsdkjfldsjflsdjf'
  
  # show errors first thing on each loop
  if len( installer.errors ) > 0:
    show_errors
  
  # Role
  is_org_admin
  if org_role == 'no_permissions':
    no_permissions_kickout
  
  # Needs
  if secret_type_wanted == 'none' and not wants_to_set_up_tests:
    nothing_wanted_kickout
  
  if secret_type_wanted == 'org' or secret_type_wanted == 'repo':
    get_secrets_info
  
  # Get and test github PAT (token) and either repo url or org name
  installer.token
  set_github_auth
  
  # Set them up with an example test file if they want
  installer.test_files_wanted
  
  # review/confirm
  is_ready
  # send the secrets and files to github
  update_github
  
  #end
  force_ask( 'next_steps' )
---
event: end
question: For ALKiln development
subquestion: |
  To allow easier and faster iteration when developing ALKiln
---
code: |
  if already_has_secrets:
    if not wants_to_update_secrets:
      secret_type_wanted = 'none'
    elif org_role == 'admin':  # admin
      secret_type_wanted = secret_type_wanted_radio
    else:  # collaborator
      secret_type_wanted = 'repo'
  else:  # has no secrets
    if org_role == 'admin':
      secret_type_wanted = secret_type_wanted_radio
    else:  # collaborator
      secret_type_wanted = 'repo'
---
code: |
  if will_test_on_this_server:
    if not logged_into_test_account_on_interview_server:
      log_into_test_account
      
  installer.password
  set_da_info
      
  get_secrets_info = True
---
code: |
  installer.set_org_secrets()
  set_org_secrets = True
---
code: |
  installer.set_da_info()
  set_da_info = True
---
code: |
  installer.set_github_auth()
  set_github_auth = True
---
code: |
  if wants_to_set_up_tests:
    # These vars need to be defined before creating a branch.
    # Otherwise, because of da execution behavior, they cause
    # loops that end up creating 5 branches. It seemed to make
    # sense to put them in here.
    installer.first_feature_file_str = installer.first_feature_file.content
    installer.run_form_tests_str = installer.run_form_tests.content
  
  installer.update_github()
  update_github = True
---
auto terms:
  the docassemble account where the tests will run: Remember that **you can use your own account** and you can always change this later.
---
# GitHub will run the tests every time the code changes.
# https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing
id: repo role
question: |
  Automated integrated testing for docassemble packages
subquestion: |
  This tool can help you set up automated testing for docassemble interview packages that have a GitHub repository. You can read more details in [the documentation](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing).
  
  :clock: Setup can take up to 40 minutes. It can take longer if you are unfamiliar with GitHub or need to contact an account administrator.
  
  To help you set up testing, we need to understand what you are trying to do and what kind of access you have to GitHub.
fields:
  - Are you setting this up for a {GitHub organization}?: is_part_of_org
    datatype: yesnoradio
  - What is your role in the GitHub organization?: org_role
    datatype: radio
    choices:
      - I am an admin: admin
      - I am a collaborator who can add or change files on GitHub: collaborator
      - I am part of the organization, but I can't add or change files on the GitHub repository: no_permissions
    show if: is_part_of_org
  - note: You can still set up automated testing for a single repository.
    show if:
      variable: is_part_of_org
      is: False
  - Are you able to add or change files on the GitHub repository?: org_role
    datatype: radio
    choices:
      - Yes: collaborator
      - No: no_permissions
    show if:
      variable: is_part_of_org
      is: False
terms:
  - GitHub organization: If you don't know what a GitHub organization is, you can just answer "No".
  - add or change files: If you develop docassemble interviews and you can commit to GitHub, you are able to change files.

#If you can "commit" to GitHub from the docassemble Packages page or edit files on GitHub, you can add or change files. Otherwise, you can't.
#  - Are you the admin of the GitHub organization?: is_org_admin
#    datatype: yesnoradio
#    show if: is_part_of_org
#help:
#  label: What will this tool do?
#  content: |
#    To set up automated integrated testing, it will:
#    
#    * Help you set up these GitHub secrets if needed:
#    
#      ${ secrets_list }
#      
#    * Help you add files to a specific repository if needed. It will create a new branch on GitHub for those files and make a pull request with that branch. These files will be added:
#    
#    ${ files_list }
#    
#    If you are not an admin, you may need to speak to an admin to get different pieces of information.
#terms:
#  - GitHub organization: If you don't know what a GitHub organization is, then you are not an admin of a GitHub organization.
---
id: role
code: |
  is_org_admin = is_part_of_org and org_role == 'admin'
---
id: no permissions
event: no_permissions_kickout
question: |
  Someone else will have to set up testing
subquestion: |
  If you can commit from the Playground Packages page or otherwise edit repository files then you can set up these tests. Otherwise, let your team know that someone else needs to set up testing.
---
# Note: any repo writer can set repo secrets
id: needs
question: |
  What do you need to do?
subquestion: |
  % if is_org_admin:
  Using this form you can {set up GitHub secrets} or set up the testing package files in a repository or both. If you set up secrets, you can choose to create secrets for your organization or for a specific repository.
  % else:
  Using this form you can set up GitHub secrets for the repository or set up the testing package files in the repository or both.
  % endif
  
  ---
  
  **Prepare GitHub secrets**
  
  ALKiln tests need GitHub secrets in order to run tests on your docassemble server. If they're not already set up, you'll need to set them up. You can read about GitHub secrets at [https://docs.github.com/en/actions/security-guides/encrypted-secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets).
  
  %if is_part_of_org and not is_org_admin:
  **Pause here.** Ask your admin whether your organization or repository already has the {right GitHub secrets}.
  % endif
fields:
  # Always
  - Has someone already set up the repository or organization secrets?: already_has_secrets
    datatype: yesnoradio
  - Do you want to update or override those secrets?: wants_to_update_secrets
    datatype: yesnoradio
    enable if:
      variable: already_has_secrets
      is: True
  # If is org admin
  - What kind of secrets do you need to set up?: secret_type_wanted_radio
    show if:
      code: |
        is_org_admin
    js enable if: |
      val("already_has_secrets") === false || val("wants_to_update_secrets") === true
    datatype: radio
    choices:
      - My organization's secrets: org
      - A repository's secrets: repo
      
  - note: |
      ---
      
      **Add test files to a specific package**
      
      You can just set up GitHub secrets and worry about a specific package's tests later. You can also choose to set up a package's test files now.
      
  - Do you need to set up test files for a specific package?: wants_to_set_up_tests
    datatype: yesnoradio
terms:
  right GitHub secrets: ${ secrets_list_one_line }
#help:
#  label: About GitHub secrets
#  content: ${ about_secrets }

  #    - Someone has set up the secrets already: none
  # Not org admin
  #- Has someone already set up the repository or organization secrets?: secret_type_wanted
  #  datatype: radio
  #  choices:
  #    - Yes: none
  #    - No: repo
  #- What do you need to do about secrets?: secret_type_wanted
  #  datatype: radio
  #  show if:
  #    code: |
  #      not is_org_admin
  #  choices:
  #    - Someone has set up the repository or organization secrets already: none
  #    - I need to set up the repository's secrets: repo
  ## Always
  #- note: |
  #    You can read more about GitHub secrets using the 'About GitHub secrets button at the bottom of this page. It may just make things more confusing, though.
---
template: secrets_list_one_line
content: |
  The secrets you need are ${ comma_and_list(secrets_names) }
---
code: |
  secrets_names = [
    'PLAYGROUND_EMAIL',
    'PLAYGROUND_PASSWORD',
    'PLAYGROUND_ID',
    'SERVER_URL',
  ]
---
template: secrets_popover
content: |
  Tap the "About GitHub Secrets" button at the bottom of this page to learn why the tests need GitHub secrets and how to see what secrets you already have.
---
id: nothing wanted
event: nothing_wanted_kickout
question: |
  This form can't help you
subquestion: |
  If you don't want to set secrets and don't want to set up tests, there is nothing to do here.
---
template: about_secrets
content: |
    **What are GitHub secrets?**

    [Encrypted GitHub secrets](https://docs.github.com/en/actions/reference/encrypted-secrets) store sensitive information that the automated tests need. To read more about why, go to the last section on this page.
    
    ---
    
    **Who can set a GitHub secret?**
    
    An admin of a GitHub **organization** can set the secrets for that GitHub organization. They can do that through this tool or just on GitHub itself. They can also set the secrets in repositories that belong to that organization.
    
    An admin of a GitHub **repository** can set the secrets for that GitHub repository on the GitHub website itself.
    
    A collaborator of a GitHub **repository** can set the secrets for the GitHub repository through **this tool**. A non-admin is unable to set secrets on GitHub itself. Yes, it's confusing. We don't know why GitHub works that way ¯\_(ツ)_/¯
    
    ---

    **Does my repository or organization already have GitHub secrets?**
    
    A non-admin cannot see organization or repository secrets. They will have to ask an admin.
    
    If you're not sure what secrets your organization has set, ask an **org admin** to take a look. They can [see them in the same place that they can create them](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-an-organization).

    If you're not sure what secrets your repository has, ask a **repository admin** to take a look. They can [see them in the same place that they can create them](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository).

    If you're not sure whether a repository has access to its organization's secrets, ask a repository admin to take a look. They can see those on the repository's secrets page too, as described above.

    If the organization has these secrets, but the secrets are not showing up in the package's repository, the organization admin may need to [change the access settings for the secret](https://docs.github.com/en/actions/reference/encrypted-secrets#reviewing-access-to-organization-level-secrets).
    
    ---

    **Why do these tests need GitHub secrets?**

    When you commit or push a file to GitHub, the automated tests will tell GitHub to:
    
    1. Log into a docassemble account on your server.
    1. Make a new Project. The name will start with "testing".
    1. Pull your package's GitHub code from the branch that they are testing.
    1. Go through the interview as if the tests were a real person.
    1. Delete the Project it created.

    To do some of those steps, the automated tests need to know a user name and password to use to log into a developer account on your server.

    If you choose to set up secrets, your answers will help this tool set these secrets:

    ${ secrets_list }
---
id: on testing server
question: |
  Before we start
subquestion: |
  Look at the url of this page. Is this the server where the tests will run?
yesno: will_test_on_this_server
---
id: logged_into_test_account_on_interview_server
question: |
  What account are you logged in on?
subquestion: |
  You, your team, or your organiztion might {want to set up an account just for running tests}. The tests can also just run on your account.

  Are you logged into the docassemble account where the tests will run?
yesno: logged_into_test_account_on_interview_server
terms:
  want to set up an account just for running tests: |
    Tap the "Why have a testing account?" button below to learn why you might want to set up an account just for running tests.
help:
  label: Why make a testing account?
  content: ${ why_special_account }
---
template: why_special_account
content: |
  **Why would you want to set up an account just for testing?**
  
  First, GitHub will use that account to run the tests. It will create Projects in there, put files in those Projects, then it will delete those Projects. If a developer is using that docassemble account, they may find it confusing.
  
  Secondly, setting tests up on a developer's account may cause problems in the future. If the developer leaves and the organization delets their account the tests will fail.
---
id: log_into_test_account
question: |
  Before you continue
subquestion: |
  To help you answer the following questions, you may want to log into the account where the tests will run. Since this form is on the same server as this interview and you are not logged into that account, you can do one of 3 things:
  
  * [Open an incognito window](https://techbrightsystems.com/incognito-mode/) and log into that account there.
  * Log into that account on a different browser.
  * Leave this interview, log into that account, and start this interview again.

  Tap to continue when you are ready.

continue button field: log_into_test_account
---
id: da server info
question: |
  GitHub secrets
subquestion: |
  As described, {the tests need some GitHub secrets}. This tool will help you set up these [encrypted GitHub secrets](https://docs.github.com/en/actions/reference/encrypted-secrets):
  
  ${ secrets_list }

  If you have not already done so:
  
  1. Decide on the docassemble account where the tests will uploaded.
  1. Make sure you are logged into that testing account.
  1. Answer the questions below for that testing account. If you want to use your own account, put your own docassemble email and password below.
fields:
  - Account email: installer.email
    datatype: email
  - Account password: installer.password
    datatype: password
  - note: |
      Go to the Playground of the testing account and run the YAML file of the interview you want to test. For example, **test.yml**. What is {the URL in the address bar} on that page? Example:[BR]
      **https://legal-dev.org/interview?i=docassemble.playground22%3Atest.yml**
  - Interview URL: installer.playground_url
# TODO: For v4, we could possibly have a default of the current server url
# Of course, it might be good to still get the file name of the interview
# this way. Just in case: `get_config('url root')`
terms:
  the URL in the address bar: |
    The interview URL will give us the testing account's Playground ID and the address of the server that the testing account is on.
  the tests need some GitHub secrets: ${ secrets_popover }
help:
  label: About GitHub secrets
  content: ${ about_secrets }
---
# TODO: Can an org admin sometimes not have push access to an org repo?
# TODO: Will org admins try to also add tests to a non-org repo?
# [personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)
id: github auth
question: |
  GitHub
subquestion: |
  We need some authorization and some information to do operations for you in GitHub.

  ---

  GitHub needs you to authorize this tool to make changes on GitHub. You can do that by creating a personal access token (PAT).
  
  You will create a PAT in **your** GitHub account as you personally are the one giving this permission. You can delete the PAT at the end.
  
  To answer the questions, do these steps:
  
  1. [Log into your GitHub account](https://github.com).
  1. Follow directions to start making your personal access token on GitHub. You can find the directions in a section at [this GitHub documentation page](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).
  % if secret_type_wanted == 'org':
  1. Tap the checkbox for "admin:org" permissions.
  % endif
  % if wants_to_set_up_tests or secret_type_wanted == 'repo':
  1. Tap the checkbox for "workflow" permissions.
  % endif
  1. Finish creating the personal access token.
  1. Copy the token and paste it below.
fields:
  - Personal access token: installer.token
    datatype: password
    help: |
      The token must have ${ token_permissions_scope } permissions.
  - note: |
      ---
      
      Next, we need the URL of the GitHub repository. Example:[BR]
      **https://github.com/TheLawFantastic/docassemble-GreatForm**
      
      The package name in the repo url must be **exactly** as it appears in GitHub, including lowercase and uppercase letters.
    show if:
      code: |
        wants_to_set_up_tests or secret_type_wanted == 'repo'
  - Repo URL: installer.repo_url
    help: |
      This should be the repository that stores the code of the interviews that you want to test. The repository's URL will give us the name of the repo and its owner.
    show if:
      code: |
        wants_to_set_up_tests or secret_type_wanted == 'repo'
  - note: |
      ---
      
      Next, we need the name of the GitHub organization. Example:[BR]
      **SuffolkLITLab**
    show if:
      code: |
        not wants_to_set_up_tests and secret_type_wanted == 'org'
  - Organization name: installer.owner_name
    show if:
      code: |
        not wants_to_set_up_tests and secret_type_wanted == 'org'
---
# TODO: discuss: Really if just setting repo secrets, only need repo permissions, but do we want to make it that complicated/inconsistent?
template: token_permissions_scope
content: |
  % if secret_type_wanted == 'org' and wants_to_set_up_tests:
  "admin:org", "workflow", and "repo"
  % elif secret_type_wanted == 'org' and not wants_to_set_up_tests:
  "admin:org"
  % else:
  "workflow" and "repo"
  % endif
---
template: files_list
content: |
  % if installer.test_files_wanted.any_true():
  * **tests/features/interviews_run.feature** is a very simple example of a test.
  % endif
  * **.github/workflows/run_interview_tests.yml** tells GitHub when and how to run the tests and save the files created.
---
template: secrets_list
content: |
  % for secret_name in secrets_names:
  * ${ secret_name }
  % endfor
---
id: first test
question: |
  The first test
subquestion: |
  We can create your first tests for you if you want. The tests will go to the first page of each interview and check that it loads. You can always edit or delete them in your "Sources" folder later.
  
  If you want to make one later instead, save this link to [our documentation](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing).
fields:
  - Which interview files to you want the test to use?: installer.test_files_wanted
    datatype: checkboxes
    code: |
      installer.get_question_file_names()
---
id: confirm info review
question: |
  Is this information correct?
subquestion: |
  You will not be able to come back here after continuing.
review:
  - Edit: installer.playground_url
    button: |
      #####Docassemble account and server:
      
      * **Account email**:[BR]
      ${ installer.email }
      
      * **Account password**: Not shown
      
      * **URL for running testable interview**:[BR]
      [${ installer.playground_url }](${ installer.playground_url })
      
      ######**Your answers also gave us this information:**
      
      * **Account Playground ID**: ${ installer.playground_id }
      
      * **Server to test on**:[BR]
      ${ installer.server_url }
      
      ---
  - Edit: installer.token
    button: |
      #####GitHub repo and permission
      
      * **Personal access token**: \*\*\*\*${ installer.token[-4:] }
      
      % if not wants_to_set_up_tests and secret_type_wanted == 'org':
      * **GitHub organization**:[BR]
      ${ installer.owner_name }
      % else:
      * **Repository URL**:[BR]
      [https://github.com/${ installer.owner_name }/${ installer.repo_name }](https://github.com/${ installer.owner_name }/${ installer.repo_name })
      % endif
      
      ######**Your answers also gave us this information:**
      
      * **Your GitHub username**:[BR]
      ${ installer.user_name }
      
      % if wants_to_set_up_tests or secret_type_wanted == 'repo':
      * **Owner of the repository**:[BR]
      ${ installer.owner_name }
      % endif
      
      % if wants_to_set_up_tests:
      * **Package name**:[BR]
      ${ installer.package_name }
      
      * **Files to test**:[BR]\
      % if installer.test_files_wanted.any_true():
      % for test_file in installer.test_files_wanted.true_values():
      ${ test_file }[BR]
      % endfor
      % else:
      None
      % endif
      % endif
      
      ---
  - note: |
      If you continue, this setup tool will make a branch called **${ installer.branch_name }** and create or overwrite this file or files:
      
      % if installer.test_files_wanted.any_true():
      1. interviews_run.feature - test file in the "sources" folder.
      % endif
      1. .github/workflows/run_form_tests.yml - runs the tests on GitHub.
      
      You can edit those files before merging the branch.
      
      ---
    show if: wants_to_set_up_tests
      
  - note: |
      There may be a few more steps after this to finish up. Continue when you are ready.
      
      :exclamation-triangle: **You will not be able to come back to this page.**
continue button field: is_ready
continue button label: Send to GitHub
---
event: next_steps
prevent going back: True
question: |
  Your GitHub settings should be updated!
subquestion: |
  **Finish setting up**
    
  % if secret_type_wanted == 'org' or secret_type_wanted == 'repo':
  ---

  ${ len( secrets_names ) } [encrypted GitHub secrets](https://docs.github.com/en/actions/reference/encrypted-secrets) were created to store the testing account's login information:
  
  ${ secrets_list }
  % endif
  
  % if secret_type_wanted == 'repo':
  If you have enough permissions, [make sure the repository secrets got created](https://github.com/${ installer.owner_name }/${ installer.repo_name }/settings/secrets/actions).
  % endif
  
  % if secret_type_wanted == 'org':
  1. [Make sure the organization secrets got created]( https://github.com/organizations/${ installer.org.login }/settings/secrets/actions).
  1. Make sure the secrets have the [access settings](https://docs.github.com/en/actions/reference/encrypted-secrets#reviewing-access-to-organization-level-secrets) you need.
  % endif
  
  % if secret_type_wanted == 'org':
  Team members that are collaborators can now use this interview to set up tests for their repositories. When they ask you if organization secrets or repo secrets have been set up, you can answer "yes".
  % endif
  
  % if not wants_to_set_up_tests:
  [Follow this link to delete the personal access token](https://github.com/settings/tokens) you created.
  
  ---
  % else:
  ---
  
  This tool should have created a new branch in the GitHub repository named **${ installer.branch_name }**. On that branch, these new folders and files should have been generated:
  
  ${ files_list }
  
  This tool should also have made a new pull request for you with those files. To finish, follow these instructions regarding that pull request.
  
  1. [Follow this link to the pull request](${ installer.pull_url }) to make sure it got created.
  1. [Follow this link to your actions page](https://github.com/${ installer.owner_name }/${ installer.repo_name }/actions) to see the first test being run on the new branch. It may take a few minutes to show up, but if all the information was correct it should pass and get a green checkmark.
  1. If the test fails with a red "x": [Follow these instructions to rerun the test](https://docs.github.com/en/actions/managing-workflow-runs/re-running-a-workflow) (a.k.a. the job). If it fails again, contact us.
  1. If the test passes with a green checkmark, get a partner to [review it](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review) or [follow these instructions to merge the pull request](https://docs.github.com/en/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request).
  1. [Follow this link to delete the personal access token](https://github.com/settings/tokens) you created.
  
  ---
  % endif
  
  If you want to disable the tests or just learn more, see [Assembly Line Kiln's documentation](https://suffolklitlab.github.io/docassemble-AssemblyLine-documentation/docs/automated_integrated_testing).
  
  If you have some feedback, we would love to hear from you! Let us know in chat or [make a public "issue" in our repository](https://github.com/plocket/docassemble-ALAutomatedTestingTests/issues/new).
  
  ---
buttons:
  - Start again: restart
#terms:
#  encrypted docassemble login information: ${ secrets_popover }
comment: |
  TODO: Should we offer to delete their personal access token for them in the interview itself? Do we have enough permissions?
  TODO: Implement feedback form instead of linking issues. See AL core for that.
  TODO: Add link to documentation on writing tests.
---
id: show_errors
event: show_errors
question: |
  Sorry, something went wrong
subquestion: |
  % for error in installer.errors:
  **Error: ${ error.status if error.status else '' } ${ error.data[ 'message' ] }**[BR]
  ${ error.data[ 'details' ] }
  
  ---
  % endfor
  
  If you cannot find a way to fix the problem, contact us in chat or [file a public issue](https://github.com/plocket/docassemble-ALAutomatedTestingTests).
---
depends on: da_url_error
code: |
  installer.da_url_error = da_url_error.content
---
template: da_url_error
content: |
  Cannot validate the interview URL **"${ installer.playground_url }"**. Example of a valid URL:[BR]
  **https://dev.court-wizards.org/interview?i=docassemble.playground222ProjectName%3Asome_file.yml** [BR]
---
depends on: github_token_error
code: |
  installer.github_token_error = github_token_error.content
---
template: github_token_error
content: |
  GitHub cannot find that [personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token). You can try copying and pasting it again or you can try [making a new one](https://github.com/settings/tokens).
---
depends on: github_pat_scopes_error
code: |
  installer.github_pat_scopes_error = github_pat_scopes_error.content
---
template: github_pat_scopes_error
content: |
  What you are trying to do needs ${ token_permissions_scope } scope(s). The permission scope(s) of the [Github personal access token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) ending in \*\*\*${ installer.token[-4:] } are **${ comma_and_list( installer.github.oauth_scopes ) }**. You can try copying and pasting the token again or you can try [making a new one](https://github.com/settings/tokens). (This disobeys plain language guidelines, sorry)
---
depends on: github_url_error
code: |
  installer.github_url_error = github_url_error.content
---
template: github_url_error
content: |
  Cannot validate the GitHub URL **"${ installer.repo_url }"**. Example of a valid URL:
  
  **https://github.com/owner_name/repo_name**
---
depends on: github_repo_not_found_error
code: |
  installer.github_repo_not_found_error = github_repo_not_found_error.content
---
template: github_repo_not_found_error
content: |
  GitHub cannot find the **${ installer.repo_name }** repository owned by the owner **${ installer.owner_name }**. Example of a valid URL:
  
  **https://github.com/owner_name/repo_name**
  
  You gave the repository address of **${ installer.repo_url }**. Are you sure that is correct?
---
depends on: not_collaborator_error
code: |
  installer.not_collaborator_error = not_collaborator_error.content
---
template: not_collaborator_error
content: |
  The user **${ installer.user_name }** is not a collaborator in the **${ installer.repo_name }** repository owned by the owner **${ installer.owner_name }**. You can ask the admin to give correct access.
---
depends on: permissions_error
code: |
  installer.permissions_error = permissions_error.content
---
template: permissions_error
content: |
  The user **${ installer.user_name }** has **${ installer.permissions }** permissions for the **${ installer.repo_name }** repository, but needs **write**, **maintain**, or **admin** permissions. You can ask the admin to give you correct access. **${ installer.owner_name }** is the owner.
---
depends on: org_does_not_exist_error
code: |
  installer.org_does_not_exist_error = org_does_not_exist_error.content
---
template: org_does_not_exist_error
content: |
  GitHub cannot find an organization called **${ installer.owner_name }**. 
---
depends on: not_an_org_member_error
code: |
  installer.not_an_org_member_error = not_an_org_member_error.content
---
template: not_an_org_member_error
content: |
  **${ installer.user_name }** might not be a **member** of **${ installer.owner_name }**. Try double checking the names.
---
depends on: not_org_admin_error
code: |
  installer.not_org_admin_error = not_org_admin_error.content
---
template: not_org_admin_error
content: |
  **${ installer.user_name }** might not be an **admin** of the organization **${ installer.owner_name }**. Try double checking the names.
---
depends on: github_branch_name_error
code: |
  installer.github_branch_name_error = github_branch_name_error.content
---
template: github_branch_name_error
content: |
  It looks like all the allowed branch names are taken. To solve this, delete some of the branches that start with "${ installer.default_branch_name }".
